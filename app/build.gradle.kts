@Suppress("DSL_SCOPE_VIOLATION") // https://youtrack.jetbrains.com/issue/KTIJ-19369
plugins {
    id(libsPlugins.plugins.android.application.get().pluginId)
    id(libsPlugins.plugins.kotlin.android.get().pluginId)
    id(libsPlugins.plugins.kotlin.kapt.get().pluginId)

    alias(libsPlugins.plugins.tripletPlay)
    alias(libsPlugins.plugins.shrinkometer)
}

android {
    namespace = "com.erdenian.studentassistant"

    defaultConfig {
        applicationId = "com.erdenian.studentassistant"
        versionCode = 21
        versionName = "0.5.2"

        resourceConfigurations.retainAll(listOf("ru"))
        setProperty("archivesBaseName", "${rootProject.name}-$versionName")
    }

    lint {
        checkDependencies = true
        checkAllWarnings = true
        xmlReport = false
        checkTestSources = true
    }

    buildFeatures.compose = true

    signingConfigs {
        val localProperties = File("${rootDir.path}/local.properties").run {
            if (exists()) `java.util`.Properties().apply { load(inputStream()) } else null
        }
        val environment = System.getenv()
        fun get(env: String, local: String) = environment[env] ?: run {
            project.logger.info("No $env environmental variable")
            localProperties?.getProperty(local) ?: run {
                project.logger.info("No $local local property")
                null
            }
        }

        data class Keystore(
            val storeFile: File,
            val storePassword: String,
            val keyAlias: String,
            val keyPassword: String
        )

        fun getReleaseKeystore(): Keystore? {
            return Keystore(
                rootProject.file("signing/release.jks"),
                get("ANDROID_KEYSTORE_PASSWORD", "signing.keystorePassword") ?: return null,
                get("ANDROID_KEY_ALIAS", "signing.keyAlias") ?: return null,
                get("ANDROID_KEY_PASSWORD", "signing.keyPassword") ?: return null
            )
        }

        getByName("debug") {
            storeFile = rootProject.file("signing/debug.jks")
            storePassword = "debugdebug"
            keyAlias = "debug"
            keyPassword = "debugdebug"

            enableV1Signing = true
            enableV2Signing = true
            enableV3Signing = true
            enableV4Signing = true
        }

        getReleaseKeystore()?.let { keystore ->
            create("release") {
                storeFile = keystore.storeFile
                storePassword = keystore.storePassword
                keyAlias = keystore.keyAlias
                keyPassword = keystore.keyPassword

                enableV1Signing = true
                enableV2Signing = true
                enableV3Signing = true
                enableV4Signing = true
            }
        } ?: project.logger.warn("WARNING: Can't create release signing config")
    }

    buildTypes {
        getByName("debug") {
            signingConfig = signingConfigs.getByName("debug")
        }
        getByName("release") {
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            signingConfig = signingConfigs.findByName("release")
        }
    }
}

dependencies {
    // region Private
    implementation(project(":core:style"))
    implementation(project(":core:strings"))

    implementation(project(":data:repository"))

    implementation(project(":features:schedule"))
    implementation(project(":features:homeworks"))
    implementation(project(":features:settings"))
    // endregion

    // region AndroidX
    implementation(libsAndroidx.appcompat)
    implementation(libsAndroidx.activity)
    implementation(libsAndroidx.navigation)
    implementation(libsAndroidx.core.splashscreen)
    // endregion

    // region Core
    kapt(libsCore.dagger.compiler)
    implementation(libsCore.dagger)

    // Required in code generated by Dagger
    compileOnly(project(":data:database"))
    compileOnly(libsAndroidx.room)
    // endregion

    // region UI
    implementation(libsUi.accompanist.navigationAnimation)
    implementation(libsUi.material)
    // endregion
}

play {
    track.set("beta")
    releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT)
    defaultToAppBundles.set(true)
}
