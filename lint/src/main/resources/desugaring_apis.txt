java.time.Clock

protected Clock()
public boolean equals(Object obj)
public int hashCode()
public static Clock fixed(Instant fixedInstant, ZoneId zone)
public static Clock offset(Clock baseClock, Duration offsetDuration)
public static Clock system(ZoneId zone)
public static Clock systemDefaultZone()
public static Clock systemUTC()
public static Clock tick(Clock baseClock, Duration tickDuration)
public static Clock tickMinutes(ZoneId zone)
public static Clock tickSeconds(ZoneId zone)
public abstract Clock withZone(ZoneId p0)
public abstract Instant instant()
public abstract ZoneId getZone()
public long millis()
Fully implemented class.


java.time.DateTimeException

public DateTimeException(String message)
public DateTimeException(String message, Throwable cause)
Fully implemented class.


java.time.DayOfWeek

public static final DayOfWeek FRIDAY
public static final DayOfWeek MONDAY
public static final DayOfWeek SATURDAY
public static final DayOfWeek SUNDAY
public static final DayOfWeek THURSDAY
public static final DayOfWeek TUESDAY
public static final DayOfWeek WEDNESDAY
public boolean isSupported(java.time.temporal.TemporalField field)
public int get(java.time.temporal.TemporalField field)
public int getValue()
public Object query(java.time.temporal.TemporalQuery query)
public String getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
public static DayOfWeek from(java.time.temporal.TemporalAccessor temporal)
public DayOfWeek minus(long days)
public static DayOfWeek of(int dayOfWeek)
public DayOfWeek plus(long days)
public static DayOfWeek valueOf(String name)
public static DayOfWeek[] values()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.Duration

public static final Duration ZERO
public boolean equals(Object otherDuration)
public boolean isNegative()
public boolean isZero()
public int compareTo(Duration otherDuration)
public int getNano()
public int hashCode()
public String toString()
public Duration abs()
public static Duration between(java.time.temporal.Temporal startInclusive, java.time.temporal.Temporal endExclusive)
public Duration dividedBy(long divisor)
public static Duration from(java.time.temporal.TemporalAmount amount)
public Duration minus(Duration duration)
public Duration minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public Duration minusDays(long daysToSubtract)
public Duration minusHours(long hoursToSubtract)
public Duration minusMillis(long millisToSubtract)
public Duration minusMinutes(long minutesToSubtract)
public Duration minusNanos(long nanosToSubtract)
public Duration minusSeconds(long secondsToSubtract)
public Duration multipliedBy(long multiplicand)
public Duration negated()
public static Duration of(long amount, java.time.temporal.TemporalUnit unit)
public static Duration ofDays(long days)
public static Duration ofHours(long hours)
public static Duration ofMillis(long millis)
public static Duration ofMinutes(long minutes)
public static Duration ofNanos(long nanos)
public static Duration ofSeconds(long seconds)
public static Duration ofSeconds(long seconds, long nanoAdjustment)
public static Duration parse(CharSequence text)
public Duration plus(Duration duration)
public Duration plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public Duration plusDays(long daysToAdd)
public Duration plusHours(long hoursToAdd)
public Duration plusMillis(long millisToAdd)
public Duration plusMinutes(long minutesToAdd)
public Duration plusNanos(long nanosToAdd)
public Duration plusSeconds(long secondsToAdd)
public Duration withNanos(int nanoOfSecond)
public Duration withSeconds(long seconds)
public java.time.temporal.Temporal addTo(java.time.temporal.Temporal temporal)
public java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal temporal)
public java.util.List getUnits()
public long get(java.time.temporal.TemporalUnit unit)
public long getSeconds()
public long toDays()
public long toHours()
public long toMillis()
public long toMinutes()
public long toNanos()
Fully implemented class.


java.time.Instant

public static final Instant EPOCH
public static final Instant MAX
public static final Instant MIN
public boolean equals(Object otherInstant)
public boolean isAfter(Instant otherInstant)
public boolean isBefore(Instant otherInstant)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(Instant otherInstant)
public int get(java.time.temporal.TemporalField field)
public int getNano()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String toString()
public static Instant from(java.time.temporal.TemporalAccessor temporal)
public Instant minus(java.time.temporal.TemporalAmount amountToSubtract)
public Instant minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public Instant minusMillis(long millisToSubtract)
public Instant minusNanos(long nanosToSubtract)
public Instant minusSeconds(long secondsToSubtract)
public static Instant now()
public static Instant now(Clock clock)
public static Instant ofEpochMilli(long epochMilli)
public static Instant ofEpochSecond(long epochSecond)
public static Instant ofEpochSecond(long epochSecond, long nanoAdjustment)
public static Instant parse(CharSequence text)
public Instant plus(java.time.temporal.TemporalAmount amountToAdd)
public Instant plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public Instant plusMillis(long millisToAdd)
public Instant plusNanos(long nanosToAdd)
public Instant plusSeconds(long secondsToAdd)
public Instant truncatedTo(java.time.temporal.TemporalUnit unit)
public Instant with(java.time.temporal.TemporalAdjuster adjuster)
public Instant with(java.time.temporal.TemporalField field, long newValue)
public OffsetDateTime atOffset(ZoneOffset offset)
public ZonedDateTime atZone(ZoneId zone)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getEpochSecond()
public long getLong(java.time.temporal.TemporalField field)
public long toEpochMilli()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.LocalDate

public static final LocalDate MAX
public static final LocalDate MIN
public boolean equals(Object obj)
public boolean isAfter(java.time.chrono.ChronoLocalDate other)
public boolean isBefore(java.time.chrono.ChronoLocalDate other)
public boolean isEqual(java.time.chrono.ChronoLocalDate other)
public boolean isLeapYear()
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(java.time.chrono.ChronoLocalDate other)
public int get(java.time.temporal.TemporalField field)
public int getDayOfMonth()
public int getDayOfYear()
public int getMonthValue()
public int getYear()
public int hashCode()
public int lengthOfMonth()
public int lengthOfYear()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public DayOfWeek getDayOfWeek()
public static LocalDate from(java.time.temporal.TemporalAccessor temporal)
public LocalDate minus(java.time.temporal.TemporalAmount amountToSubtract)
public LocalDate minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public LocalDate minusDays(long daysToSubtract)
public LocalDate minusMonths(long monthsToSubtract)
public LocalDate minusWeeks(long weeksToSubtract)
public LocalDate minusYears(long yearsToSubtract)
public static LocalDate now()
public static LocalDate now(Clock clock)
public static LocalDate now(ZoneId zone)
public static LocalDate of(int year, int month, int dayOfMonth)
public static LocalDate of(int year, Month month, int dayOfMonth)
public static LocalDate ofEpochDay(long epochDay)
public static LocalDate ofYearDay(int year, int dayOfYear)
public static LocalDate parse(CharSequence text)
public static LocalDate parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public LocalDate plus(java.time.temporal.TemporalAmount amountToAdd)
public LocalDate plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public LocalDate plusDays(long daysToAdd)
public LocalDate plusMonths(long monthsToAdd)
public LocalDate plusWeeks(long weeksToAdd)
public LocalDate plusYears(long yearsToAdd)
public LocalDate with(java.time.temporal.TemporalAdjuster adjuster)
public LocalDate with(java.time.temporal.TemporalField field, long newValue)
public LocalDate withDayOfMonth(int dayOfMonth)
public LocalDate withDayOfYear(int dayOfYear)
public LocalDate withMonth(int month)
public LocalDate withYear(int year)
public LocalDateTime atStartOfDay()
public LocalDateTime atTime(int hour, int minute)
public LocalDateTime atTime(int hour, int minute, int second)
public LocalDateTime atTime(int hour, int minute, int second, int nanoOfSecond)
public LocalDateTime atTime(LocalTime time)
public Month getMonth()
public OffsetDateTime atTime(OffsetTime time)
public Period until(java.time.chrono.ChronoLocalDate endDateExclusive)
public ZonedDateTime atStartOfDay(ZoneId zone)
public java.time.chrono.Era getEra()
public java.time.chrono.IsoChronology getChronology()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long toEpochDay()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.LocalDateTime

public static final LocalDateTime MAX
public static final LocalDateTime MIN
public boolean equals(Object obj)
public boolean isAfter(java.time.chrono.ChronoLocalDateTime other)
public boolean isBefore(java.time.chrono.ChronoLocalDateTime other)
public boolean isEqual(java.time.chrono.ChronoLocalDateTime other)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(java.time.chrono.ChronoLocalDateTime other)
public int get(java.time.temporal.TemporalField field)
public int getDayOfMonth()
public int getDayOfYear()
public int getHour()
public int getMinute()
public int getMonthValue()
public int getNano()
public int getSecond()
public int getYear()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public DayOfWeek getDayOfWeek()
public LocalDate toLocalDate()
public static LocalDateTime from(java.time.temporal.TemporalAccessor temporal)
public LocalDateTime minus(java.time.temporal.TemporalAmount amountToSubtract)
public LocalDateTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public LocalDateTime minusDays(long days)
public LocalDateTime minusHours(long hours)
public LocalDateTime minusMinutes(long minutes)
public LocalDateTime minusMonths(long months)
public LocalDateTime minusNanos(long nanos)
public LocalDateTime minusSeconds(long seconds)
public LocalDateTime minusWeeks(long weeks)
public LocalDateTime minusYears(long years)
public static LocalDateTime now()
public static LocalDateTime now(Clock clock)
public static LocalDateTime now(ZoneId zone)
public static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute)
public static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)
public static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)
public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour, int minute)
public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour, int minute, int second)
public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)
public static LocalDateTime of(LocalDate date, LocalTime time)
public static LocalDateTime ofEpochSecond(long epochSecond, int nanoOfSecond, ZoneOffset offset)
public static LocalDateTime ofInstant(Instant instant, ZoneId zone)
public static LocalDateTime parse(CharSequence text)
public static LocalDateTime parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public LocalDateTime plus(java.time.temporal.TemporalAmount amountToAdd)
public LocalDateTime plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public LocalDateTime plusDays(long days)
public LocalDateTime plusHours(long hours)
public LocalDateTime plusMinutes(long minutes)
public LocalDateTime plusMonths(long months)
public LocalDateTime plusNanos(long nanos)
public LocalDateTime plusSeconds(long seconds)
public LocalDateTime plusWeeks(long weeks)
public LocalDateTime plusYears(long years)
public LocalDateTime truncatedTo(java.time.temporal.TemporalUnit unit)
public LocalDateTime with(java.time.temporal.TemporalAdjuster adjuster)
public LocalDateTime with(java.time.temporal.TemporalField field, long newValue)
public LocalDateTime withDayOfMonth(int dayOfMonth)
public LocalDateTime withDayOfYear(int dayOfYear)
public LocalDateTime withHour(int hour)
public LocalDateTime withMinute(int minute)
public LocalDateTime withMonth(int month)
public LocalDateTime withNano(int nanoOfSecond)
public LocalDateTime withSecond(int second)
public LocalDateTime withYear(int year)
public LocalTime toLocalTime()
public Month getMonth()
public OffsetDateTime atOffset(ZoneOffset offset)
public ZonedDateTime atZone(ZoneId zone)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.LocalTime

public static final LocalTime MAX
public static final LocalTime MIDNIGHT
public static final LocalTime MIN
public static final LocalTime NOON
public boolean equals(Object obj)
public boolean isAfter(LocalTime other)
public boolean isBefore(LocalTime other)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(LocalTime other)
public int get(java.time.temporal.TemporalField field)
public int getHour()
public int getMinute()
public int getNano()
public int getSecond()
public int hashCode()
public int toSecondOfDay()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public LocalDateTime atDate(LocalDate date)
public static LocalTime from(java.time.temporal.TemporalAccessor temporal)
public LocalTime minus(java.time.temporal.TemporalAmount amountToSubtract)
public LocalTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public LocalTime minusHours(long hoursToSubtract)
public LocalTime minusMinutes(long minutesToSubtract)
public LocalTime minusNanos(long nanosToSubtract)
public LocalTime minusSeconds(long secondsToSubtract)
public static LocalTime now()
public static LocalTime now(Clock clock)
public static LocalTime now(ZoneId zone)
public static LocalTime of(int hour, int minute)
public static LocalTime of(int hour, int minute, int second)
public static LocalTime of(int hour, int minute, int second, int nanoOfSecond)
public static LocalTime ofNanoOfDay(long nanoOfDay)
public static LocalTime ofSecondOfDay(long secondOfDay)
public static LocalTime parse(CharSequence text)
public static LocalTime parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public LocalTime plus(java.time.temporal.TemporalAmount amountToAdd)
public LocalTime plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public LocalTime plusHours(long hoursToAdd)
public LocalTime plusMinutes(long minutesToAdd)
public LocalTime plusNanos(long nanosToAdd)
public LocalTime plusSeconds(long secondstoAdd)
public LocalTime truncatedTo(java.time.temporal.TemporalUnit unit)
public LocalTime with(java.time.temporal.TemporalAdjuster adjuster)
public LocalTime with(java.time.temporal.TemporalField field, long newValue)
public LocalTime withHour(int hour)
public LocalTime withMinute(int minute)
public LocalTime withNano(int nanoOfSecond)
public LocalTime withSecond(int second)
public OffsetTime atOffset(ZoneOffset offset)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long toNanoOfDay()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.Month

public static final Month APRIL
public static final Month AUGUST
public static final Month DECEMBER
public static final Month FEBRUARY
public static final Month JANUARY
public static final Month JULY
public static final Month JUNE
public static final Month MARCH
public static final Month MAY
public static final Month NOVEMBER
public static final Month OCTOBER
public static final Month SEPTEMBER
public boolean isSupported(java.time.temporal.TemporalField field)
public int firstDayOfYear(boolean leapYear)
public int get(java.time.temporal.TemporalField field)
public int getValue()
public int length(boolean leapYear)
public int maxLength()
public int minLength()
public Object query(java.time.temporal.TemporalQuery query)
public String getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
public Month firstMonthOfQuarter()
public static Month from(java.time.temporal.TemporalAccessor temporal)
public Month minus(long months)
public static Month of(int month)
public Month plus(long months)
public static Month valueOf(String name)
public static Month[] values()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.MonthDay

public boolean equals(Object obj)
public boolean isAfter(MonthDay other)
public boolean isBefore(MonthDay other)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isValidYear(int year)
public int compareTo(MonthDay other)
public int get(java.time.temporal.TemporalField field)
public int getDayOfMonth()
public int getMonthValue()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public LocalDate atYear(int year)
public Month getMonth()
public static MonthDay from(java.time.temporal.TemporalAccessor temporal)
public static MonthDay now()
public static MonthDay now(Clock clock)
public static MonthDay now(ZoneId zone)
public static MonthDay of(int month, int dayOfMonth)
public static MonthDay of(Month month, int dayOfMonth)
public static MonthDay parse(CharSequence text)
public static MonthDay parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public MonthDay with(Month month)
public MonthDay withDayOfMonth(int dayOfMonth)
public MonthDay withMonth(int month)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.OffsetDateTime

public static final OffsetDateTime MAX
public static final OffsetDateTime MIN
public boolean equals(Object obj)
public boolean isAfter(OffsetDateTime other)
public boolean isBefore(OffsetDateTime other)
public boolean isEqual(OffsetDateTime other)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(OffsetDateTime other)
public int get(java.time.temporal.TemporalField field)
public int getDayOfMonth()
public int getDayOfYear()
public int getHour()
public int getMinute()
public int getMonthValue()
public int getNano()
public int getSecond()
public int getYear()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public DayOfWeek getDayOfWeek()
public Instant toInstant()
public LocalDate toLocalDate()
public LocalDateTime toLocalDateTime()
public LocalTime toLocalTime()
public Month getMonth()
public static OffsetDateTime from(java.time.temporal.TemporalAccessor temporal)
public OffsetDateTime minus(java.time.temporal.TemporalAmount amountToSubtract)
public OffsetDateTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public OffsetDateTime minusDays(long days)
public OffsetDateTime minusHours(long hours)
public OffsetDateTime minusMinutes(long minutes)
public OffsetDateTime minusMonths(long months)
public OffsetDateTime minusNanos(long nanos)
public OffsetDateTime minusSeconds(long seconds)
public OffsetDateTime minusWeeks(long weeks)
public OffsetDateTime minusYears(long years)
public static OffsetDateTime now()
public static OffsetDateTime now(Clock clock)
public static OffsetDateTime now(ZoneId zone)
public static OffsetDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)
public static OffsetDateTime of(LocalDate date, LocalTime time, ZoneOffset offset)
public static OffsetDateTime of(LocalDateTime dateTime, ZoneOffset offset)
public static OffsetDateTime ofInstant(Instant instant, ZoneId zone)
public static OffsetDateTime parse(CharSequence text)
public static OffsetDateTime parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public OffsetDateTime plus(java.time.temporal.TemporalAmount amountToAdd)
public OffsetDateTime plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public OffsetDateTime plusDays(long days)
public OffsetDateTime plusHours(long hours)
public OffsetDateTime plusMinutes(long minutes)
public OffsetDateTime plusMonths(long months)
public OffsetDateTime plusNanos(long nanos)
public OffsetDateTime plusSeconds(long seconds)
public OffsetDateTime plusWeeks(long weeks)
public OffsetDateTime plusYears(long years)
public OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit unit)
public OffsetDateTime with(java.time.temporal.TemporalAdjuster adjuster)
public OffsetDateTime with(java.time.temporal.TemporalField field, long newValue)
public OffsetDateTime withDayOfMonth(int dayOfMonth)
public OffsetDateTime withDayOfYear(int dayOfYear)
public OffsetDateTime withHour(int hour)
public OffsetDateTime withMinute(int minute)
public OffsetDateTime withMonth(int month)
public OffsetDateTime withNano(int nanoOfSecond)
public OffsetDateTime withOffsetSameInstant(ZoneOffset offset)
public OffsetDateTime withOffsetSameLocal(ZoneOffset offset)
public OffsetDateTime withSecond(int second)
public OffsetDateTime withYear(int year)
public OffsetTime toOffsetTime()
public ZoneOffset getOffset()
public ZonedDateTime atZoneSameInstant(ZoneId zone)
public ZonedDateTime atZoneSimilarLocal(ZoneId zone)
public ZonedDateTime toZonedDateTime()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public static java.util.Comparator timeLineOrder()
public long getLong(java.time.temporal.TemporalField field)
public long toEpochSecond()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.OffsetTime

public static final OffsetTime MAX
public static final OffsetTime MIN
public boolean equals(Object obj)
public boolean isAfter(OffsetTime other)
public boolean isBefore(OffsetTime other)
public boolean isEqual(OffsetTime other)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(OffsetTime other)
public int get(java.time.temporal.TemporalField field)
public int getHour()
public int getMinute()
public int getNano()
public int getSecond()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public LocalTime toLocalTime()
public OffsetDateTime atDate(LocalDate date)
public static OffsetTime from(java.time.temporal.TemporalAccessor temporal)
public OffsetTime minus(java.time.temporal.TemporalAmount amountToSubtract)
public OffsetTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public OffsetTime minusHours(long hours)
public OffsetTime minusMinutes(long minutes)
public OffsetTime minusNanos(long nanos)
public OffsetTime minusSeconds(long seconds)
public static OffsetTime now()
public static OffsetTime now(Clock clock)
public static OffsetTime now(ZoneId zone)
public static OffsetTime of(int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)
public static OffsetTime of(LocalTime time, ZoneOffset offset)
public static OffsetTime ofInstant(Instant instant, ZoneId zone)
public static OffsetTime parse(CharSequence text)
public static OffsetTime parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public OffsetTime plus(java.time.temporal.TemporalAmount amountToAdd)
public OffsetTime plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public OffsetTime plusHours(long hours)
public OffsetTime plusMinutes(long minutes)
public OffsetTime plusNanos(long nanos)
public OffsetTime plusSeconds(long seconds)
public OffsetTime truncatedTo(java.time.temporal.TemporalUnit unit)
public OffsetTime with(java.time.temporal.TemporalAdjuster adjuster)
public OffsetTime with(java.time.temporal.TemporalField field, long newValue)
public OffsetTime withHour(int hour)
public OffsetTime withMinute(int minute)
public OffsetTime withNano(int nanoOfSecond)
public OffsetTime withOffsetSameInstant(ZoneOffset offset)
public OffsetTime withOffsetSameLocal(ZoneOffset offset)
public OffsetTime withSecond(int second)
public ZoneOffset getOffset()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.Period

public static final Period ZERO
public boolean equals(Object obj)
public boolean isNegative()
public boolean isZero()
public int getDays()
public int getMonths()
public int getYears()
public int hashCode()
public String toString()
public static Period between(LocalDate startDateInclusive, LocalDate endDateExclusive)
public static Period from(java.time.temporal.TemporalAmount amount)
public Period minus(java.time.temporal.TemporalAmount amountToSubtract)
public Period minusDays(long daysToSubtract)
public Period minusMonths(long monthsToSubtract)
public Period minusYears(long yearsToSubtract)
public Period multipliedBy(int scalar)
public Period negated()
public Period normalized()
public static Period of(int years, int months, int days)
public static Period ofDays(int days)
public static Period ofMonths(int months)
public static Period ofWeeks(int weeks)
public static Period ofYears(int years)
public static Period parse(CharSequence text)
public Period plus(java.time.temporal.TemporalAmount amountToAdd)
public Period plusDays(long daysToAdd)
public Period plusMonths(long monthsToAdd)
public Period plusYears(long yearsToAdd)
public Period withDays(int days)
public Period withMonths(int months)
public Period withYears(int years)
public java.time.chrono.IsoChronology getChronology()
public java.time.temporal.Temporal addTo(java.time.temporal.Temporal temporal)
public java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal temporal)
public java.util.List getUnits()
public long get(java.time.temporal.TemporalUnit unit)
public long toTotalMonths()
Fully implemented class.


java.time.Year

public static final int MAX_VALUE
public static final int MIN_VALUE
public boolean equals(Object obj)
public boolean isAfter(Year other)
public boolean isBefore(Year other)
public boolean isLeap()
public static boolean isLeap(long year)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public boolean isValidMonthDay(MonthDay monthDay)
public int compareTo(Year other)
public int get(java.time.temporal.TemporalField field)
public int getValue()
public int hashCode()
public int length()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public LocalDate atDay(int dayOfYear)
public LocalDate atMonthDay(MonthDay monthDay)
public static Year from(java.time.temporal.TemporalAccessor temporal)
public Year minus(java.time.temporal.TemporalAmount amountToSubtract)
public Year minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public Year minusYears(long yearsToSubtract)
public static Year now()
public static Year now(Clock clock)
public static Year now(ZoneId zone)
public static Year of(int isoYear)
public static Year parse(CharSequence text)
public static Year parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public Year plus(java.time.temporal.TemporalAmount amountToAdd)
public Year plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public Year plusYears(long yearsToAdd)
public Year with(java.time.temporal.TemporalAdjuster adjuster)
public Year with(java.time.temporal.TemporalField field, long newValue)
public YearMonth atMonth(int month)
public YearMonth atMonth(Month month)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.YearMonth

public boolean equals(Object obj)
public boolean isAfter(YearMonth other)
public boolean isBefore(YearMonth other)
public boolean isLeapYear()
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public boolean isValidDay(int dayOfMonth)
public int compareTo(YearMonth other)
public int get(java.time.temporal.TemporalField field)
public int getMonthValue()
public int getYear()
public int hashCode()
public int lengthOfMonth()
public int lengthOfYear()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public LocalDate atDay(int dayOfMonth)
public LocalDate atEndOfMonth()
public Month getMonth()
public static YearMonth from(java.time.temporal.TemporalAccessor temporal)
public YearMonth minus(java.time.temporal.TemporalAmount amountToSubtract)
public YearMonth minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public YearMonth minusMonths(long monthsToSubtract)
public YearMonth minusYears(long yearsToSubtract)
public static YearMonth now()
public static YearMonth now(Clock clock)
public static YearMonth now(ZoneId zone)
public static YearMonth of(int year, int month)
public static YearMonth of(int year, Month month)
public static YearMonth parse(CharSequence text)
public static YearMonth parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public YearMonth plus(java.time.temporal.TemporalAmount amountToAdd)
public YearMonth plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public YearMonth plusMonths(long monthsToAdd)
public YearMonth plusYears(long yearsToAdd)
public YearMonth with(java.time.temporal.TemporalAdjuster adjuster)
public YearMonth with(java.time.temporal.TemporalField field, long newValue)
public YearMonth withMonth(int month)
public YearMonth withYear(int year)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.ZoneId

public static final java.util.Map SHORT_IDS
public boolean equals(Object obj)
public int hashCode()
public String getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
public abstract String getId()
public String toString()
public static ZoneId from(java.time.temporal.TemporalAccessor temporal)
public ZoneId normalized()
public static ZoneId of(String zoneId)
public static ZoneId of(String zoneId, java.util.Map aliasMap)
public static ZoneId ofOffset(String prefix, ZoneOffset offset)
public static ZoneId systemDefault()
public abstract java.time.zone.ZoneRules getRules()
public static java.util.Set getAvailableZoneIds()
Fully implemented class.


java.time.ZoneOffset

public static final ZoneOffset MAX
public static final ZoneOffset MIN
public static final ZoneOffset UTC
public boolean equals(Object obj)
public boolean isSupported(java.time.temporal.TemporalField field)
public int compareTo(ZoneOffset other)
public int get(java.time.temporal.TemporalField field)
public int getTotalSeconds()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String getId()
public String toString()
public static ZoneOffset from(java.time.temporal.TemporalAccessor temporal)
public static ZoneOffset of(String offsetId)
public static ZoneOffset ofHours(int hours)
public static ZoneOffset ofHoursMinutes(int hours, int minutes)
public static ZoneOffset ofHoursMinutesSeconds(int hours, int minutes, int seconds)
public static ZoneOffset ofTotalSeconds(int totalSeconds)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public java.time.zone.ZoneRules getRules()
public long getLong(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.ZonedDateTime

public boolean equals(Object obj)
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int get(java.time.temporal.TemporalField field)
public int getDayOfMonth()
public int getDayOfYear()
public int getHour()
public int getMinute()
public int getMonthValue()
public int getNano()
public int getSecond()
public int getYear()
public int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public String toString()
public DayOfWeek getDayOfWeek()
public LocalDate toLocalDate()
public LocalDateTime toLocalDateTime()
public LocalTime toLocalTime()
public Month getMonth()
public OffsetDateTime toOffsetDateTime()
public ZoneId getZone()
public ZoneOffset getOffset()
public static ZonedDateTime from(java.time.temporal.TemporalAccessor temporal)
public ZonedDateTime minus(java.time.temporal.TemporalAmount amountToSubtract)
public ZonedDateTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public ZonedDateTime minusDays(long days)
public ZonedDateTime minusHours(long hours)
public ZonedDateTime minusMinutes(long minutes)
public ZonedDateTime minusMonths(long months)
public ZonedDateTime minusNanos(long nanos)
public ZonedDateTime minusSeconds(long seconds)
public ZonedDateTime minusWeeks(long weeks)
public ZonedDateTime minusYears(long years)
public static ZonedDateTime now()
public static ZonedDateTime now(Clock clock)
public static ZonedDateTime now(ZoneId zone)
public static ZonedDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)
public static ZonedDateTime of(LocalDate date, LocalTime time, ZoneId zone)
public static ZonedDateTime of(LocalDateTime localDateTime, ZoneId zone)
public static ZonedDateTime ofInstant(Instant instant, ZoneId zone)
public static ZonedDateTime ofInstant(LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)
public static ZonedDateTime ofLocal(LocalDateTime localDateTime, ZoneId zone, ZoneOffset preferredOffset)
public static ZonedDateTime ofStrict(LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)
public static ZonedDateTime parse(CharSequence text)
public static ZonedDateTime parse(CharSequence text, java.time.format.DateTimeFormatter formatter)
public ZonedDateTime plus(java.time.temporal.TemporalAmount amountToAdd)
public ZonedDateTime plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public ZonedDateTime plusDays(long days)
public ZonedDateTime plusHours(long hours)
public ZonedDateTime plusMinutes(long minutes)
public ZonedDateTime plusMonths(long months)
public ZonedDateTime plusNanos(long nanos)
public ZonedDateTime plusSeconds(long seconds)
public ZonedDateTime plusWeeks(long weeks)
public ZonedDateTime plusYears(long years)
public ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit unit)
public ZonedDateTime with(java.time.temporal.TemporalAdjuster adjuster)
public ZonedDateTime with(java.time.temporal.TemporalField field, long newValue)
public ZonedDateTime withDayOfMonth(int dayOfMonth)
public ZonedDateTime withDayOfYear(int dayOfYear)
public ZonedDateTime withEarlierOffsetAtOverlap()
public ZonedDateTime withFixedOffsetZone()
public ZonedDateTime withHour(int hour)
public ZonedDateTime withLaterOffsetAtOverlap()
public ZonedDateTime withMinute(int minute)
public ZonedDateTime withMonth(int month)
public ZonedDateTime withNano(int nanoOfSecond)
public ZonedDateTime withSecond(int second)
public ZonedDateTime withYear(int year)
public ZonedDateTime withZoneSameInstant(ZoneId zone)
public ZonedDateTime withZoneSameLocal(ZoneId zone)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.chrono.AbstractChronology

protected AbstractChronology()
public boolean equals(Object obj)
public int compareTo(Chronology other)
public int hashCode()
public String toString()
public ChronoLocalDate resolveDate(java.util.Map fieldValues, java.time.format.ResolverStyle resolverStyle)
Fully implemented class.


java.time.chrono.ChronoLocalDate

public abstract boolean equals(Object p0)
public boolean isAfter(ChronoLocalDate other)
public boolean isBefore(ChronoLocalDate other)
public boolean isEqual(ChronoLocalDate other)
public boolean isLeapYear()
public boolean isSupported(java.time.temporal.TemporalField field)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(ChronoLocalDate other)
public abstract int hashCode()
public abstract int lengthOfMonth()
public int lengthOfYear()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public abstract String toString()
public static ChronoLocalDate from(java.time.temporal.TemporalAccessor temporal)
public ChronoLocalDate minus(java.time.temporal.TemporalAmount amount)
public ChronoLocalDate minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public ChronoLocalDate plus(java.time.temporal.TemporalAmount amount)
public ChronoLocalDate plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public ChronoLocalDate with(java.time.temporal.TemporalAdjuster adjuster)
public ChronoLocalDate with(java.time.temporal.TemporalField field, long newValue)
public ChronoLocalDateTime atTime(java.time.LocalTime localTime)
public abstract ChronoPeriod until(ChronoLocalDate p0)
public abstract Chronology getChronology()
public Era getEra()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public static java.util.Comparator timeLineOrder()
public long toEpochDay()
public abstract long until(java.time.temporal.Temporal p0, java.time.temporal.TemporalUnit p1)
Fully implemented class.


java.time.chrono.ChronoLocalDateTime

public abstract boolean equals(Object p0)
public boolean isAfter(ChronoLocalDateTime other)
public boolean isBefore(ChronoLocalDateTime other)
public boolean isEqual(ChronoLocalDateTime other)
public abstract boolean isSupported(java.time.temporal.TemporalField p0)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(ChronoLocalDateTime other)
public abstract int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public abstract String toString()
public java.time.Instant toInstant(java.time.ZoneOffset offset)
public abstract java.time.LocalTime toLocalTime()
public abstract ChronoLocalDate toLocalDate()
public static ChronoLocalDateTime from(java.time.temporal.TemporalAccessor temporal)
public ChronoLocalDateTime minus(java.time.temporal.TemporalAmount amount)
public ChronoLocalDateTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public ChronoLocalDateTime plus(java.time.temporal.TemporalAmount amount)
public abstract ChronoLocalDateTime plus(long p0, java.time.temporal.TemporalUnit p1)
public ChronoLocalDateTime with(java.time.temporal.TemporalAdjuster adjuster)
public abstract ChronoLocalDateTime with(java.time.temporal.TemporalField p0, long p1)
public abstract ChronoZonedDateTime atZone(java.time.ZoneId p0)
public Chronology getChronology()
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public static java.util.Comparator timeLineOrder()
public long toEpochSecond(java.time.ZoneOffset offset)
Fully implemented class.


java.time.chrono.ChronoPeriod

public abstract boolean equals(Object p0)
public boolean isNegative()
public boolean isZero()
public abstract int hashCode()
public abstract String toString()
public static ChronoPeriod between(ChronoLocalDate startDateInclusive, ChronoLocalDate endDateExclusive)
public abstract ChronoPeriod minus(java.time.temporal.TemporalAmount p0)
public abstract ChronoPeriod multipliedBy(int p0)
public ChronoPeriod negated()
public abstract ChronoPeriod normalized()
public abstract ChronoPeriod plus(java.time.temporal.TemporalAmount p0)
public abstract Chronology getChronology()
public abstract java.time.temporal.Temporal addTo(java.time.temporal.Temporal p0)
public abstract java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal p0)
public abstract java.util.List getUnits()
public abstract long get(java.time.temporal.TemporalUnit p0)
Fully implemented class.


java.time.chrono.ChronoZonedDateTime

public abstract boolean equals(Object p0)
public boolean isAfter(ChronoZonedDateTime other)
public boolean isBefore(ChronoZonedDateTime other)
public boolean isEqual(ChronoZonedDateTime other)
public abstract boolean isSupported(java.time.temporal.TemporalField p0)
public boolean isSupported(java.time.temporal.TemporalUnit unit)
public int compareTo(ChronoZonedDateTime other)
public int get(java.time.temporal.TemporalField field)
public abstract int hashCode()
public Object query(java.time.temporal.TemporalQuery query)
public String format(java.time.format.DateTimeFormatter formatter)
public abstract String toString()
public java.time.Instant toInstant()
public java.time.LocalTime toLocalTime()
public abstract java.time.ZoneId getZone()
public abstract java.time.ZoneOffset getOffset()
public ChronoLocalDate toLocalDate()
public abstract ChronoLocalDateTime toLocalDateTime()
public static ChronoZonedDateTime from(java.time.temporal.TemporalAccessor temporal)
public ChronoZonedDateTime minus(java.time.temporal.TemporalAmount amount)
public ChronoZonedDateTime minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public ChronoZonedDateTime plus(java.time.temporal.TemporalAmount amount)
public abstract ChronoZonedDateTime plus(long p0, java.time.temporal.TemporalUnit p1)
public ChronoZonedDateTime with(java.time.temporal.TemporalAdjuster adjuster)
public abstract ChronoZonedDateTime with(java.time.temporal.TemporalField p0, long p1)
public abstract ChronoZonedDateTime withEarlierOffsetAtOverlap()
public abstract ChronoZonedDateTime withLaterOffsetAtOverlap()
public abstract ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId p0)
public abstract ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId p0)
public Chronology getChronology()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public static java.util.Comparator timeLineOrder()
public long getLong(java.time.temporal.TemporalField field)
public long toEpochSecond()
Fully implemented class.


java.time.chrono.Chronology

public abstract boolean equals(Object p0)
public abstract boolean isLeapYear(long p0)
public abstract int compareTo(Chronology p0)
public abstract int hashCode()
public abstract int prolepticYear(Era p0, int p1)
public abstract String getCalendarType()
public String getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
public abstract String getId()
public abstract String toString()
public abstract ChronoLocalDate date(int p0, int p1, int p2)
public ChronoLocalDate date(Era era, int yearOfEra, int month, int dayOfMonth)
public abstract ChronoLocalDate date(java.time.temporal.TemporalAccessor p0)
public abstract ChronoLocalDate dateEpochDay(long p0)
public ChronoLocalDate dateNow()
public ChronoLocalDate dateNow(java.time.Clock clock)
public ChronoLocalDate dateNow(java.time.ZoneId zone)
public abstract ChronoLocalDate dateYearDay(int p0, int p1)
public ChronoLocalDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
public abstract ChronoLocalDate resolveDate(java.util.Map p0, java.time.format.ResolverStyle p1)
public ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor temporal)
public ChronoPeriod period(int years, int months, int days)
public ChronoZonedDateTime zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
public ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor temporal)
public static Chronology from(java.time.temporal.TemporalAccessor temporal)
public static Chronology of(String id)
public static Chronology ofLocale(java.util.Locale locale)
public abstract Era eraOf(int p0)
public abstract java.time.temporal.ValueRange range(java.time.temporal.ChronoField p0)
public abstract java.util.List eras()
public static java.util.Set getAvailableChronologies()
Fully implemented class.


java.time.chrono.Era

public boolean isSupported(java.time.temporal.TemporalField field)
public int get(java.time.temporal.TemporalField field)
public abstract int getValue()
public Object query(java.time.temporal.TemporalQuery query)
public String getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.chrono.HijrahChronology

public static final HijrahChronology INSTANCE
public boolean isLeapYear(long prolepticYear)
public int prolepticYear(Era era, int yearOfEra)
public String getCalendarType()
public String getId()
public ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor temporal)
public ChronoZonedDateTime zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
public ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor temporal)
public HijrahDate date(int prolepticYear, int month, int dayOfMonth)
public HijrahDate date(Era era, int yearOfEra, int month, int dayOfMonth)
public HijrahDate date(java.time.temporal.TemporalAccessor temporal)
public HijrahDate dateEpochDay(long epochDay)
public HijrahDate dateNow()
public HijrahDate dateNow(java.time.Clock clock)
public HijrahDate dateNow(java.time.ZoneId zone)
public HijrahDate dateYearDay(int prolepticYear, int dayOfYear)
public HijrahDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
public HijrahDate resolveDate(java.util.Map fieldValues, java.time.format.ResolverStyle resolverStyle)
public HijrahEra eraOf(int eraValue)
public java.time.temporal.ValueRange range(java.time.temporal.ChronoField field)
public java.util.List eras()
Fully implemented class.


java.time.chrono.HijrahDate

public boolean equals(Object obj)
public boolean isLeapYear()
public int hashCode()
public int lengthOfMonth()
public int lengthOfYear()
public String toString()
public ChronoLocalDateTime atTime(java.time.LocalTime localTime)
public ChronoPeriod until(ChronoLocalDate endDate)
public HijrahChronology getChronology()
public static HijrahDate from(java.time.temporal.TemporalAccessor temporal)
public HijrahDate minus(java.time.temporal.TemporalAmount amount)
public HijrahDate minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
public static HijrahDate now()
public static HijrahDate now(java.time.Clock clock)
public static HijrahDate now(java.time.ZoneId zone)
public static HijrahDate of(int prolepticYear, int month, int dayOfMonth)
public HijrahDate plus(java.time.temporal.TemporalAmount amount)
public HijrahDate plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public HijrahDate with(java.time.temporal.TemporalAdjuster adjuster)
public HijrahDate with(java.time.temporal.TemporalField field, long newValue)
public HijrahDate withVariant(HijrahChronology chronology)
public HijrahEra getEra()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long toEpochDay()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.chrono.HijrahEra

public static final HijrahEra AH
public int getValue()
public static HijrahEra of(int hijrahEra)
public static HijrahEra valueOf(String name)
public static HijrahEra[] values()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.chrono.IsoChronology

public static final IsoChronology INSTANCE
public boolean isLeapYear(long prolepticYear)
public int prolepticYear(Era era, int yearOfEra)
public String getCalendarType()
public String getId()
public java.time.LocalDate date(int prolepticYear, int month, int dayOfMonth)
public java.time.LocalDate date(Era era, int yearOfEra, int month, int dayOfMonth)
public java.time.LocalDate date(java.time.temporal.TemporalAccessor temporal)
public java.time.LocalDate dateEpochDay(long epochDay)
public java.time.LocalDate dateNow()
public java.time.LocalDate dateNow(java.time.Clock clock)
public java.time.LocalDate dateNow(java.time.ZoneId zone)
public java.time.LocalDate dateYearDay(int prolepticYear, int dayOfYear)
public java.time.LocalDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
public java.time.LocalDate resolveDate(java.util.Map fieldValues, java.time.format.ResolverStyle resolverStyle)
public java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor temporal)
public java.time.Period period(int years, int months, int days)
public java.time.ZonedDateTime zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
public java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor temporal)
public IsoEra eraOf(int eraValue)
public java.time.temporal.ValueRange range(java.time.temporal.ChronoField field)
public java.util.List eras()
Fully implemented class.


java.time.chrono.IsoEra

public static final IsoEra BCE
public static final IsoEra CE
public int getValue()
public static IsoEra of(int isoEra)
public static IsoEra valueOf(String name)
public static IsoEra[] values()
Fully implemented class.


java.time.chrono.JapaneseChronology

public static final JapaneseChronology INSTANCE
public boolean isLeapYear(long prolepticYear)
public int prolepticYear(Era era, int yearOfEra)
public String getCalendarType()
public String getId()
public ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor temporal)
public ChronoZonedDateTime zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
public ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor temporal)
public JapaneseDate date(int prolepticYear, int month, int dayOfMonth)
public JapaneseDate date(Era era, int yearOfEra, int month, int dayOfMonth)
public JapaneseDate date(java.time.temporal.TemporalAccessor temporal)
public JapaneseDate dateEpochDay(long epochDay)
public JapaneseDate dateNow()
public JapaneseDate dateNow(java.time.Clock clock)
public JapaneseDate dateNow(java.time.ZoneId zone)
public JapaneseDate dateYearDay(int prolepticYear, int dayOfYear)
public JapaneseDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
public JapaneseDate resolveDate(java.util.Map fieldValues, java.time.format.ResolverStyle resolverStyle)
public JapaneseEra eraOf(int eraValue)
public java.time.temporal.ValueRange range(java.time.temporal.ChronoField field)
public java.util.List eras()
Fully implemented class.


java.time.chrono.JapaneseDate

public boolean equals(Object obj)
public boolean isSupported(java.time.temporal.TemporalField field)
public int hashCode()
public int lengthOfMonth()
public int lengthOfYear()
public String toString()
public ChronoLocalDateTime atTime(java.time.LocalTime localTime)
public ChronoPeriod until(ChronoLocalDate endDate)
public JapaneseChronology getChronology()
public static JapaneseDate from(java.time.temporal.TemporalAccessor temporal)
public JapaneseDate minus(java.time.temporal.TemporalAmount amount)
public JapaneseDate minus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public static JapaneseDate now()
public static JapaneseDate now(java.time.Clock clock)
public static JapaneseDate now(java.time.ZoneId zone)
public static JapaneseDate of(int prolepticYear, int month, int dayOfMonth)
public static JapaneseDate of(JapaneseEra era, int yearOfEra, int month, int dayOfMonth)
public JapaneseDate plus(java.time.temporal.TemporalAmount amount)
public JapaneseDate plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public JapaneseDate with(java.time.temporal.TemporalAdjuster adjuster)
public JapaneseDate with(java.time.temporal.TemporalField field, long newValue)
public JapaneseEra getEra()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long toEpochDay()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.chrono.JapaneseEra

public static final JapaneseEra HEISEI
public static final JapaneseEra MEIJI
public static final JapaneseEra SHOWA
public static final JapaneseEra TAISHO
public int getValue()
public String getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
public String toString()
public static JapaneseEra of(int japaneseEra)
public static JapaneseEra valueOf(String japaneseEra)
public static JapaneseEra[] values()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
Fully implemented class.


java.time.chrono.MinguoChronology

public static final MinguoChronology INSTANCE
public boolean isLeapYear(long prolepticYear)
public int prolepticYear(Era era, int yearOfEra)
public String getCalendarType()
public String getId()
public ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor temporal)
public ChronoZonedDateTime zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
public ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor temporal)
public MinguoDate date(int prolepticYear, int month, int dayOfMonth)
public MinguoDate date(Era era, int yearOfEra, int month, int dayOfMonth)
public MinguoDate date(java.time.temporal.TemporalAccessor temporal)
public MinguoDate dateEpochDay(long epochDay)
public MinguoDate dateNow()
public MinguoDate dateNow(java.time.Clock clock)
public MinguoDate dateNow(java.time.ZoneId zone)
public MinguoDate dateYearDay(int prolepticYear, int dayOfYear)
public MinguoDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
public MinguoDate resolveDate(java.util.Map fieldValues, java.time.format.ResolverStyle resolverStyle)
public MinguoEra eraOf(int eraValue)
public java.time.temporal.ValueRange range(java.time.temporal.ChronoField field)
public java.util.List eras()
Fully implemented class.


java.time.chrono.MinguoDate

public boolean equals(Object obj)
public int hashCode()
public int lengthOfMonth()
public String toString()
public ChronoLocalDateTime atTime(java.time.LocalTime localTime)
public ChronoPeriod until(ChronoLocalDate endDate)
public MinguoChronology getChronology()
public static MinguoDate from(java.time.temporal.TemporalAccessor temporal)
public MinguoDate minus(java.time.temporal.TemporalAmount amount)
public MinguoDate minus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public static MinguoDate now()
public static MinguoDate now(java.time.Clock clock)
public static MinguoDate now(java.time.ZoneId zone)
public static MinguoDate of(int prolepticYear, int month, int dayOfMonth)
public MinguoDate plus(java.time.temporal.TemporalAmount amount)
public MinguoDate plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public MinguoDate with(java.time.temporal.TemporalAdjuster adjuster)
public MinguoDate with(java.time.temporal.TemporalField field, long newValue)
public MinguoEra getEra()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long toEpochDay()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.chrono.MinguoEra

public static final MinguoEra BEFORE_ROC
public static final MinguoEra ROC
public int getValue()
public static MinguoEra of(int minguoEra)
public static MinguoEra valueOf(String name)
public static MinguoEra[] values()
Fully implemented class.


java.time.chrono.ThaiBuddhistChronology

public static final ThaiBuddhistChronology INSTANCE
public boolean isLeapYear(long prolepticYear)
public int prolepticYear(Era era, int yearOfEra)
public String getCalendarType()
public String getId()
public ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor temporal)
public ChronoZonedDateTime zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
public ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor temporal)
public ThaiBuddhistDate date(int prolepticYear, int month, int dayOfMonth)
public ThaiBuddhistDate date(Era era, int yearOfEra, int month, int dayOfMonth)
public ThaiBuddhistDate date(java.time.temporal.TemporalAccessor temporal)
public ThaiBuddhistDate dateEpochDay(long epochDay)
public ThaiBuddhistDate dateNow()
public ThaiBuddhistDate dateNow(java.time.Clock clock)
public ThaiBuddhistDate dateNow(java.time.ZoneId zone)
public ThaiBuddhistDate dateYearDay(int prolepticYear, int dayOfYear)
public ThaiBuddhistDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
public ThaiBuddhistDate resolveDate(java.util.Map fieldValues, java.time.format.ResolverStyle resolverStyle)
public ThaiBuddhistEra eraOf(int eraValue)
public java.time.temporal.ValueRange range(java.time.temporal.ChronoField field)
public java.util.List eras()
Fully implemented class.


java.time.chrono.ThaiBuddhistDate

public boolean equals(Object obj)
public int hashCode()
public int lengthOfMonth()
public String toString()
public ChronoLocalDateTime atTime(java.time.LocalTime localTime)
public ChronoPeriod until(ChronoLocalDate endDate)
public ThaiBuddhistChronology getChronology()
public static ThaiBuddhistDate from(java.time.temporal.TemporalAccessor temporal)
public ThaiBuddhistDate minus(java.time.temporal.TemporalAmount amount)
public ThaiBuddhistDate minus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public static ThaiBuddhistDate now()
public static ThaiBuddhistDate now(java.time.Clock clock)
public static ThaiBuddhistDate now(java.time.ZoneId zone)
public static ThaiBuddhistDate of(int prolepticYear, int month, int dayOfMonth)
public ThaiBuddhistDate plus(java.time.temporal.TemporalAmount amount)
public ThaiBuddhistDate plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
public ThaiBuddhistDate with(java.time.temporal.TemporalAdjuster adjuster)
public ThaiBuddhistDate with(java.time.temporal.TemporalField field, long newValue)
public ThaiBuddhistEra getEra()
public java.time.temporal.ValueRange range(java.time.temporal.TemporalField field)
public long getLong(java.time.temporal.TemporalField field)
public long toEpochDay()
public long until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
Fully implemented class.


java.time.chrono.ThaiBuddhistEra

public static final ThaiBuddhistEra BE
public static final ThaiBuddhistEra BEFORE_BE
public int getValue()
public static ThaiBuddhistEra of(int thaiBuddhistEra)
public static ThaiBuddhistEra valueOf(String name)
public static ThaiBuddhistEra[] values()
Fully implemented class.


java.time.format.DateTimeFormatter

public static final DateTimeFormatter BASIC_ISO_DATE
public static final DateTimeFormatter ISO_DATE
public static final DateTimeFormatter ISO_DATE_TIME
public static final DateTimeFormatter ISO_INSTANT
public static final DateTimeFormatter ISO_LOCAL_DATE
public static final DateTimeFormatter ISO_LOCAL_DATE_TIME
public static final DateTimeFormatter ISO_LOCAL_TIME
public static final DateTimeFormatter ISO_OFFSET_DATE
public static final DateTimeFormatter ISO_OFFSET_DATE_TIME
public static final DateTimeFormatter ISO_OFFSET_TIME
public static final DateTimeFormatter ISO_ORDINAL_DATE
public static final DateTimeFormatter ISO_TIME
public static final DateTimeFormatter ISO_WEEK_DATE
public static final DateTimeFormatter ISO_ZONED_DATE_TIME
public static final DateTimeFormatter RFC_1123_DATE_TIME
public Object parse(CharSequence text, java.time.temporal.TemporalQuery query)
public String format(java.time.temporal.TemporalAccessor temporal)
public String toString()
public java.text.Format toFormat()
public java.text.Format toFormat(java.time.temporal.TemporalQuery parseQuery)
public java.time.ZoneId getZone()
public java.time.chrono.Chronology getChronology()
public static DateTimeFormatter ofLocalizedDate(FormatStyle dateStyle)
public static DateTimeFormatter ofLocalizedDateTime(FormatStyle dateTimeStyle)
public static DateTimeFormatter ofLocalizedDateTime(FormatStyle dateStyle, FormatStyle timeStyle)
public static DateTimeFormatter ofLocalizedTime(FormatStyle timeStyle)
public static DateTimeFormatter ofPattern(String pattern)
public static DateTimeFormatter ofPattern(String pattern, java.util.Locale locale)
public DateTimeFormatter withChronology(java.time.chrono.Chronology chrono)
public DateTimeFormatter withDecimalStyle(DecimalStyle decimalStyle)
public DateTimeFormatter withLocale(java.util.Locale locale)
public DateTimeFormatter withResolverFields(java.time.temporal.TemporalField[] resolverFields)
public DateTimeFormatter withResolverFields(java.util.Set resolverFields)
public DateTimeFormatter withResolverStyle(ResolverStyle resolverStyle)
public DateTimeFormatter withZone(java.time.ZoneId zone)
public DecimalStyle getDecimalStyle()
public ResolverStyle getResolverStyle()
public java.time.temporal.TemporalAccessor parse(CharSequence text)
public java.time.temporal.TemporalAccessor parse(CharSequence text, java.text.ParsePosition position)
public java.time.temporal.TemporalAccessor parseBest(CharSequence text, java.time.temporal.TemporalQuery[] queries)
public java.time.temporal.TemporalAccessor parseUnresolved(CharSequence text, java.text.ParsePosition position)
public static java.time.temporal.TemporalQuery parsedExcessDays()
public static java.time.temporal.TemporalQuery parsedLeapSecond()
public java.util.Locale getLocale()
public java.util.Set getResolverFields()
public void formatTo(java.time.temporal.TemporalAccessor temporal, Appendable appendable)
Fully implemented class.


java.time.format.DateTimeFormatterBuilder

public DateTimeFormatterBuilder()
public static String getLocalizedDateTimePattern(FormatStyle dateStyle, FormatStyle timeStyle, java.time.chrono.Chronology chrono, java.util.Locale locale)
public DateTimeFormatter toFormatter()
public DateTimeFormatter toFormatter(java.util.Locale locale)
public DateTimeFormatterBuilder append(DateTimeFormatter formatter)
public DateTimeFormatterBuilder appendChronologyId()
public DateTimeFormatterBuilder appendChronologyText(TextStyle textStyle)
public DateTimeFormatterBuilder appendFraction(java.time.temporal.TemporalField field, int minWidth, int maxWidth, boolean decimalPoint)
public DateTimeFormatterBuilder appendInstant()
public DateTimeFormatterBuilder appendInstant(int fractionalDigits)
public DateTimeFormatterBuilder appendLiteral(char literal)
public DateTimeFormatterBuilder appendLiteral(String literal)
public DateTimeFormatterBuilder appendLocalized(FormatStyle dateStyle, FormatStyle timeStyle)
public DateTimeFormatterBuilder appendLocalizedOffset(TextStyle style)
public DateTimeFormatterBuilder appendOffset(String pattern, String noOffsetText)
public DateTimeFormatterBuilder appendOffsetId()
public DateTimeFormatterBuilder appendOptional(DateTimeFormatter formatter)
public DateTimeFormatterBuilder appendPattern(String pattern)
public DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField field)
public DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField field, TextStyle textStyle)
public DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField field, java.util.Map textLookup)
public DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField field)
public DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField field, int width)
public DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField field, int minWidth, int maxWidth, SignStyle signStyle)
public DateTimeFormatterBuilder appendValueReduced(java.time.temporal.TemporalField field, int width, int maxWidth, int baseValue)
public DateTimeFormatterBuilder appendValueReduced(java.time.temporal.TemporalField field, int width, int maxWidth, java.time.chrono.ChronoLocalDate baseDate)
public DateTimeFormatterBuilder appendZoneId()
public DateTimeFormatterBuilder appendZoneOrOffsetId()
public DateTimeFormatterBuilder appendZoneRegionId()
public DateTimeFormatterBuilder appendZoneText(TextStyle textStyle)
public DateTimeFormatterBuilder appendZoneText(TextStyle textStyle, java.util.Set preferredZones)
public DateTimeFormatterBuilder optionalEnd()
public DateTimeFormatterBuilder optionalStart()
public DateTimeFormatterBuilder padNext(int padWidth)
public DateTimeFormatterBuilder padNext(int padWidth, char padChar)
public DateTimeFormatterBuilder parseCaseInsensitive()
public DateTimeFormatterBuilder parseCaseSensitive()
public DateTimeFormatterBuilder parseDefaulting(java.time.temporal.TemporalField field, long value)
public DateTimeFormatterBuilder parseLenient()
public DateTimeFormatterBuilder parseStrict()
Fully implemented class.


java.time.format.DateTimeParseException

public DateTimeParseException(String message, CharSequence parsedData, int errorIndex)
public DateTimeParseException(String message, CharSequence parsedData, int errorIndex, Throwable cause)
public int getErrorIndex()
public String getParsedString()
Fully implemented class.


java.time.format.DecimalStyle

public static final DecimalStyle STANDARD
public boolean equals(Object obj)
public char getDecimalSeparator()
public char getNegativeSign()
public char getPositiveSign()
public char getZeroDigit()
public int hashCode()
public String toString()
public static DecimalStyle of(java.util.Locale locale)
public static DecimalStyle ofDefaultLocale()
public DecimalStyle withDecimalSeparator(char decimalSeparator)
public DecimalStyle withNegativeSign(char negativeSign)
public DecimalStyle withPositiveSign(char positiveSign)
public DecimalStyle withZeroDigit(char zeroDigit)
public static java.util.Set getAvailableLocales()
Fully implemented class.


java.time.format.FormatStyle

public static final FormatStyle FULL
public static final FormatStyle LONG
public static final FormatStyle MEDIUM
public static final FormatStyle SHORT
public static FormatStyle valueOf(String name)
public static FormatStyle[] values()
Fully implemented class.


java.time.format.ResolverStyle

public static final ResolverStyle LENIENT
public static final ResolverStyle SMART
public static final ResolverStyle STRICT
public static ResolverStyle valueOf(String name)
public static ResolverStyle[] values()
Fully implemented class.


java.time.format.SignStyle

public static final SignStyle ALWAYS
public static final SignStyle EXCEEDS_PAD
public static final SignStyle NEVER
public static final SignStyle NORMAL
public static final SignStyle NOT_NEGATIVE
public static SignStyle valueOf(String name)
public static SignStyle[] values()
Fully implemented class.


java.time.format.TextStyle

public static final TextStyle FULL
public static final TextStyle FULL_STANDALONE
public static final TextStyle NARROW
public static final TextStyle NARROW_STANDALONE
public static final TextStyle SHORT
public static final TextStyle SHORT_STANDALONE
public boolean isStandalone()
public TextStyle asNormal()
public TextStyle asStandalone()
public static TextStyle valueOf(String name)
public static TextStyle[] values()
Fully implemented class.


java.time.temporal.ChronoField

public static final ChronoField ALIGNED_DAY_OF_WEEK_IN_MONTH
public static final ChronoField ALIGNED_DAY_OF_WEEK_IN_YEAR
public static final ChronoField ALIGNED_WEEK_OF_MONTH
public static final ChronoField ALIGNED_WEEK_OF_YEAR
public static final ChronoField AMPM_OF_DAY
public static final ChronoField CLOCK_HOUR_OF_AMPM
public static final ChronoField CLOCK_HOUR_OF_DAY
public static final ChronoField DAY_OF_MONTH
public static final ChronoField DAY_OF_WEEK
public static final ChronoField DAY_OF_YEAR
public static final ChronoField EPOCH_DAY
public static final ChronoField ERA
public static final ChronoField HOUR_OF_AMPM
public static final ChronoField HOUR_OF_DAY
public static final ChronoField INSTANT_SECONDS
public static final ChronoField MICRO_OF_DAY
public static final ChronoField MICRO_OF_SECOND
public static final ChronoField MILLI_OF_DAY
public static final ChronoField MILLI_OF_SECOND
public static final ChronoField MINUTE_OF_DAY
public static final ChronoField MINUTE_OF_HOUR
public static final ChronoField MONTH_OF_YEAR
public static final ChronoField NANO_OF_DAY
public static final ChronoField NANO_OF_SECOND
public static final ChronoField OFFSET_SECONDS
public static final ChronoField PROLEPTIC_MONTH
public static final ChronoField SECOND_OF_DAY
public static final ChronoField SECOND_OF_MINUTE
public static final ChronoField YEAR
public static final ChronoField YEAR_OF_ERA
public boolean isDateBased()
public boolean isSupportedBy(TemporalAccessor temporal)
public boolean isTimeBased()
public int checkValidIntValue(long value)
public String getDisplayName(java.util.Locale locale)
public String toString()
public static ChronoField valueOf(String name)
public static ChronoField[] values()
public Temporal adjustInto(Temporal temporal, long newValue)
public TemporalUnit getBaseUnit()
public TemporalUnit getRangeUnit()
public ValueRange range()
public ValueRange rangeRefinedBy(TemporalAccessor temporal)
public long checkValidValue(long value)
public long getFrom(TemporalAccessor temporal)
Fully implemented class.


java.time.temporal.ChronoUnit

public static final ChronoUnit CENTURIES
public static final ChronoUnit DAYS
public static final ChronoUnit DECADES
public static final ChronoUnit ERAS
public static final ChronoUnit FOREVER
public static final ChronoUnit HALF_DAYS
public static final ChronoUnit HOURS
public static final ChronoUnit MICROS
public static final ChronoUnit MILLENNIA
public static final ChronoUnit MILLIS
public static final ChronoUnit MINUTES
public static final ChronoUnit MONTHS
public static final ChronoUnit NANOS
public static final ChronoUnit SECONDS
public static final ChronoUnit WEEKS
public static final ChronoUnit YEARS
public boolean isDateBased()
public boolean isDurationEstimated()
public boolean isSupportedBy(Temporal temporal)
public boolean isTimeBased()
public String toString()
public java.time.Duration getDuration()
public static ChronoUnit valueOf(String name)
public static ChronoUnit[] values()
public Temporal addTo(Temporal temporal, long amount)
public long between(Temporal temporal1Inclusive, Temporal temporal2Exclusive)
Fully implemented class.


java.time.temporal.IsoFields

public static final TemporalField DAY_OF_QUARTER
public static final TemporalField QUARTER_OF_YEAR
public static final TemporalField WEEK_BASED_YEAR
public static final TemporalField WEEK_OF_WEEK_BASED_YEAR
public static final TemporalUnit QUARTER_YEARS
public static final TemporalUnit WEEK_BASED_YEARS
Fully implemented class.


java.time.temporal.JulianFields

public static final TemporalField JULIAN_DAY
public static final TemporalField MODIFIED_JULIAN_DAY
public static final TemporalField RATA_DIE
Fully implemented class.


java.time.temporal.Temporal

public abstract boolean isSupported(TemporalUnit p0)
public Temporal minus(TemporalAmount amount)
public Temporal minus(long amountToSubtract, TemporalUnit unit)
public Temporal plus(TemporalAmount amount)
public abstract Temporal plus(long p0, TemporalUnit p1)
public Temporal with(TemporalAdjuster adjuster)
public abstract Temporal with(TemporalField p0, long p1)
public abstract long until(Temporal p0, TemporalUnit p1)
Fully implemented class.


java.time.temporal.TemporalAccessor

public abstract boolean isSupported(TemporalField p0)
public int get(TemporalField field)
public Object query(TemporalQuery query)
public ValueRange range(TemporalField field)
public abstract long getLong(TemporalField p0)
Fully implemented class.


java.time.temporal.TemporalAdjuster

public abstract Temporal adjustInto(Temporal p0)
Fully implemented class.


java.time.temporal.TemporalAdjusters

public static TemporalAdjuster dayOfWeekInMonth(int ordinal, java.time.DayOfWeek dayOfWeek)
public static TemporalAdjuster firstDayOfMonth()
public static TemporalAdjuster firstDayOfNextMonth()
public static TemporalAdjuster firstDayOfNextYear()
public static TemporalAdjuster firstDayOfYear()
public static TemporalAdjuster firstInMonth(java.time.DayOfWeek dayOfWeek)
public static TemporalAdjuster lastDayOfMonth()
public static TemporalAdjuster lastDayOfYear()
public static TemporalAdjuster lastInMonth(java.time.DayOfWeek dayOfWeek)
public static TemporalAdjuster next(java.time.DayOfWeek dayOfWeek)
public static TemporalAdjuster nextOrSame(java.time.DayOfWeek dayOfWeek)
public static TemporalAdjuster ofDateAdjuster(java.util.function.UnaryOperator dateBasedAdjuster)
public static TemporalAdjuster previous(java.time.DayOfWeek dayOfWeek)
public static TemporalAdjuster previousOrSame(java.time.DayOfWeek dayOfWeek)
Fully implemented class.


java.time.temporal.TemporalAmount

public abstract Temporal addTo(Temporal p0)
public abstract Temporal subtractFrom(Temporal p0)
public abstract java.util.List getUnits()
public abstract long get(TemporalUnit p0)
Fully implemented class.


java.time.temporal.TemporalField

public abstract boolean isDateBased()
public abstract boolean isSupportedBy(TemporalAccessor p0)
public abstract boolean isTimeBased()
public String getDisplayName(java.util.Locale locale)
public abstract String toString()
public abstract Temporal adjustInto(Temporal p0, long p1)
public TemporalAccessor resolve(java.util.Map fieldValues, TemporalAccessor partialTemporal, java.time.format.ResolverStyle resolverStyle)
public abstract TemporalUnit getBaseUnit()
public abstract TemporalUnit getRangeUnit()
public abstract ValueRange range()
public abstract ValueRange rangeRefinedBy(TemporalAccessor p0)
public abstract long getFrom(TemporalAccessor p0)
Fully implemented class.


java.time.temporal.TemporalQueries

public static TemporalQuery chronology()
public static TemporalQuery localDate()
public static TemporalQuery localTime()
public static TemporalQuery offset()
public static TemporalQuery precision()
public static TemporalQuery zone()
public static TemporalQuery zoneId()
Fully implemented class.


java.time.temporal.TemporalQuery

public abstract Object queryFrom(TemporalAccessor p0)
Fully implemented class.


java.time.temporal.TemporalUnit

public abstract boolean isDateBased()
public abstract boolean isDurationEstimated()
public boolean isSupportedBy(Temporal temporal)
public abstract boolean isTimeBased()
public abstract String toString()
public abstract java.time.Duration getDuration()
public abstract Temporal addTo(Temporal p0, long p1)
public abstract long between(Temporal p0, Temporal p1)
Fully implemented class.


java.time.temporal.UnsupportedTemporalTypeException

public UnsupportedTemporalTypeException(String message)
public UnsupportedTemporalTypeException(String message, Throwable cause)
Fully implemented class.


java.time.temporal.ValueRange

public boolean equals(Object obj)
public boolean isFixed()
public boolean isIntValue()
public boolean isValidIntValue(long value)
public boolean isValidValue(long value)
public int checkValidIntValue(long value, TemporalField field)
public int hashCode()
public String toString()
public static ValueRange of(long min, long max)
public static ValueRange of(long min, long maxSmallest, long maxLargest)
public static ValueRange of(long minSmallest, long minLargest, long maxSmallest, long maxLargest)
public long checkValidValue(long value, TemporalField field)
public long getLargestMinimum()
public long getMaximum()
public long getMinimum()
public long getSmallestMaximum()
Fully implemented class.


java.time.temporal.WeekFields

public static final TemporalUnit WEEK_BASED_YEARS
public static final WeekFields ISO
public static final WeekFields SUNDAY_START
public boolean equals(Object object)
public int getMinimalDaysInFirstWeek()
public int hashCode()
public String toString()
public java.time.DayOfWeek getFirstDayOfWeek()
public TemporalField dayOfWeek()
public TemporalField weekBasedYear()
public TemporalField weekOfMonth()
public TemporalField weekOfWeekBasedYear()
public TemporalField weekOfYear()
public static WeekFields of(java.time.DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek)
public static WeekFields of(java.util.Locale locale)
Fully implemented class.


java.time.zone.ZoneOffsetTransition

public boolean equals(Object other)
public boolean isGap()
public boolean isOverlap()
public boolean isValidOffset(java.time.ZoneOffset offset)
public int compareTo(ZoneOffsetTransition transition)
public int hashCode()
public String toString()
public java.time.Duration getDuration()
public java.time.Instant getInstant()
public java.time.LocalDateTime getDateTimeAfter()
public java.time.LocalDateTime getDateTimeBefore()
public java.time.ZoneOffset getOffsetAfter()
public java.time.ZoneOffset getOffsetBefore()
public static ZoneOffsetTransition of(java.time.LocalDateTime transition, java.time.ZoneOffset offsetBefore, java.time.ZoneOffset offsetAfter)
public long toEpochSecond()
Fully implemented class.


java.time.zone.ZoneOffsetTransitionRule

public boolean equals(Object otherRule)
public boolean isMidnightEndOfDay()
public int getDayOfMonthIndicator()
public int hashCode()
public String toString()
public java.time.DayOfWeek getDayOfWeek()
public java.time.LocalTime getLocalTime()
public java.time.Month getMonth()
public java.time.ZoneOffset getOffsetAfter()
public java.time.ZoneOffset getOffsetBefore()
public java.time.ZoneOffset getStandardOffset()
public ZoneOffsetTransition createTransition(int year)
public static ZoneOffsetTransitionRule of(java.time.Month month, int dayOfMonthIndicator, java.time.DayOfWeek dayOfWeek, java.time.LocalTime time, boolean timeEndOfDay, ZoneOffsetTransitionRule.TimeDefinition timeDefnition, java.time.ZoneOffset standardOffset, java.time.ZoneOffset offsetBefore, java.time.ZoneOffset offsetAfter)
public ZoneOffsetTransitionRule.TimeDefinition getTimeDefinition()
Fully implemented class.


java.time.zone.ZoneOffsetTransitionRule.TimeDefinition

public static final ZoneOffsetTransitionRule.TimeDefinition STANDARD
public static final ZoneOffsetTransitionRule.TimeDefinition UTC
public static final ZoneOffsetTransitionRule.TimeDefinition WALL
public java.time.LocalDateTime createDateTime(java.time.LocalDateTime dateTime, java.time.ZoneOffset standardOffset, java.time.ZoneOffset wallOffset)
public static ZoneOffsetTransitionRule.TimeDefinition valueOf(String name)
public static ZoneOffsetTransitionRule.TimeDefinition[] values()
Fully implemented class.


java.time.zone.ZoneRules

public boolean equals(Object otherRules)
public boolean isDaylightSavings(java.time.Instant instant)
public boolean isFixedOffset()
public boolean isValidOffset(java.time.LocalDateTime localDateTime, java.time.ZoneOffset offset)
public int hashCode()
public String toString()
public java.time.Duration getDaylightSavings(java.time.Instant instant)
public java.time.ZoneOffset getOffset(java.time.Instant instant)
public java.time.ZoneOffset getOffset(java.time.LocalDateTime localDateTime)
public java.time.ZoneOffset getStandardOffset(java.time.Instant instant)
public ZoneOffsetTransition getTransition(java.time.LocalDateTime localDateTime)
public ZoneOffsetTransition nextTransition(java.time.Instant instant)
public ZoneOffsetTransition previousTransition(java.time.Instant instant)
public static ZoneRules of(java.time.ZoneOffset offset)
public static ZoneRules of(java.time.ZoneOffset baseStandardOffset, java.time.ZoneOffset baseWallOffset, java.util.List standardOffsetTransitionList, java.util.List transitionList, java.util.List lastRules)
public java.util.List getTransitionRules()
public java.util.List getTransitions()
public java.util.List getValidOffsets(java.time.LocalDateTime localDateTime)
Fully implemented class.


java.time.zone.ZoneRulesException

public ZoneRulesException(String message)
public ZoneRulesException(String message, Throwable cause)
Fully implemented class.


java.util.DoubleSummaryStatistics

public DoubleSummaryStatistics()
public final double getAverage()
public final double getMax()
public final double getMin()
public final double getSum()
public String toString()
public final long getCount()
public void accept(double value)
public void combine(DoubleSummaryStatistics other)
Fully implemented class.


java.util.IntSummaryStatistics

public IntSummaryStatistics()
public final double getAverage()
public final int getMax()
public final int getMin()
public String toString()
public final long getCount()
public final long getSum()
public void accept(int value)
public void combine(IntSummaryStatistics other)
Fully implemented class.


java.util.LongSummaryStatistics

public LongSummaryStatistics()
public final double getAverage()
public String toString()
public final long getCount()
public final long getMax()
public final long getMin()
public final long getSum()
public void accept(int value)
public void accept(long value)
public void combine(LongSummaryStatistics other)
Fully implemented class.


java.util.Optional

public boolean equals(Object obj)
public boolean isPresent()
public int hashCode()
public Object get()
public Object orElse(Object other)
public Object orElseGet(java.util.function.Supplier other)
public Object orElseThrow(java.util.function.Supplier exceptionSupplier)
public String toString()
public static Optional empty()
public Optional filter(java.util.function.Predicate predicate)
public Optional flatMap(java.util.function.Function mapper)
public Optional map(java.util.function.Function mapper)
public static Optional of(Object value)
public static Optional ofNullable(Object value)
public void ifPresent(java.util.function.Consumer consumer)
Fully implemented class.


java.util.OptionalDouble

public boolean equals(Object obj)
public boolean isPresent()
public double getAsDouble()
public double orElse(double other)
public double orElseGet(java.util.function.DoubleSupplier other)
public double orElseThrow(java.util.function.Supplier exceptionSupplier)
public int hashCode()
public String toString()
public static OptionalDouble empty()
public static OptionalDouble of(double value)
public void ifPresent(java.util.function.DoubleConsumer consumer)
Fully implemented class.


java.util.OptionalInt

public boolean equals(Object obj)
public boolean isPresent()
public int getAsInt()
public int hashCode()
public int orElse(int other)
public int orElseGet(java.util.function.IntSupplier other)
public int orElseThrow(java.util.function.Supplier exceptionSupplier)
public String toString()
public static OptionalInt empty()
public static OptionalInt of(int value)
public void ifPresent(java.util.function.IntConsumer consumer)
Fully implemented class.


java.util.OptionalLong

public boolean equals(Object obj)
public boolean isPresent()
public int hashCode()
public String toString()
public static OptionalLong empty()
public static OptionalLong of(long value)
public long getAsLong()
public long orElse(long other)
public long orElseGet(java.util.function.LongSupplier other)
public long orElseThrow(java.util.function.Supplier exceptionSupplier)
public void ifPresent(java.util.function.LongConsumer consumer)
Fully implemented class.


java.util.PrimitiveIterator

public abstract void forEachRemaining(Object p0)
Fully implemented class.


java.util.PrimitiveIterator.OfDouble

public abstract double nextDouble()
public Double next()
public void forEachRemaining(java.util.function.Consumer action)
public void forEachRemaining(java.util.function.DoubleConsumer action)
Fully implemented class.


java.util.PrimitiveIterator.OfInt

public abstract int nextInt()
public Integer next()
public void forEachRemaining(java.util.function.Consumer action)
public void forEachRemaining(java.util.function.IntConsumer action)
Fully implemented class.


java.util.PrimitiveIterator.OfLong

public Long next()
public abstract long nextLong()
public void forEachRemaining(java.util.function.Consumer action)
public void forEachRemaining(java.util.function.LongConsumer action)
Fully implemented class.


java.util.Spliterator

public static final int CONCURRENT
public static final int DISTINCT
public static final int IMMUTABLE
public static final int NONNULL
public static final int ORDERED
public static final int SIZED
public static final int SORTED
public static final int SUBSIZED
public boolean hasCharacteristics(int characteristics)
public abstract boolean tryAdvance(java.util.function.Consumer p0)
public abstract int characteristics()
public Comparator getComparator()
public abstract Spliterator trySplit()
public abstract long estimateSize()
public long getExactSizeIfKnown()
public void forEachRemaining(java.util.function.Consumer action)
Fully implemented class.


java.util.Spliterator.OfDouble

public boolean tryAdvance(java.util.function.Consumer action)
public abstract boolean tryAdvance(java.util.function.DoubleConsumer p0)
public abstract Spliterator.OfDouble trySplit()
public void forEachRemaining(java.util.function.Consumer action)
public void forEachRemaining(java.util.function.DoubleConsumer action)
Fully implemented class.


java.util.Spliterator.OfInt

public boolean tryAdvance(java.util.function.Consumer action)
public abstract boolean tryAdvance(java.util.function.IntConsumer p0)
public abstract Spliterator.OfInt trySplit()
public void forEachRemaining(java.util.function.Consumer action)
public void forEachRemaining(java.util.function.IntConsumer action)
Fully implemented class.


java.util.Spliterator.OfLong

public boolean tryAdvance(java.util.function.Consumer action)
public abstract boolean tryAdvance(java.util.function.LongConsumer p0)
public abstract Spliterator.OfLong trySplit()
public void forEachRemaining(java.util.function.Consumer action)
public void forEachRemaining(java.util.function.LongConsumer action)
Fully implemented class.


java.util.Spliterator.OfPrimitive

public abstract boolean tryAdvance(Object p0)
public abstract Spliterator.OfPrimitive trySplit()
public void forEachRemaining(Object action)
Fully implemented class.


java.util.Spliterators

public static Iterator iterator(Spliterator spliterator)
public static PrimitiveIterator.OfDouble iterator(Spliterator.OfDouble spliterator)
public static PrimitiveIterator.OfInt iterator(Spliterator.OfInt spliterator)
public static PrimitiveIterator.OfLong iterator(Spliterator.OfLong spliterator)
public static Spliterator emptySpliterator()
public static Spliterator spliterator(Object[] array, int additionalCharacteristics)
public static Spliterator spliterator(Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)
public static Spliterator spliterator(Collection c, int characteristics)
public static Spliterator spliterator(Iterator iterator, long size, int characteristics)
public static Spliterator spliteratorUnknownSize(Iterator iterator, int characteristics)
public static Spliterator.OfDouble emptyDoubleSpliterator()
public static Spliterator.OfDouble spliterator(double[] array, int additionalCharacteristics)
public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex, int additionalCharacteristics)
public static Spliterator.OfDouble spliterator(PrimitiveIterator.OfDouble iterator, long size, int characteristics)
public static Spliterator.OfDouble spliteratorUnknownSize(PrimitiveIterator.OfDouble iterator, int characteristics)
public static Spliterator.OfInt emptyIntSpliterator()
public static Spliterator.OfInt spliterator(int[] array, int additionalCharacteristics)
public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex, int additionalCharacteristics)
public static Spliterator.OfInt spliterator(PrimitiveIterator.OfInt iterator, long size, int characteristics)
public static Spliterator.OfInt spliteratorUnknownSize(PrimitiveIterator.OfInt iterator, int characteristics)
public static Spliterator.OfLong emptyLongSpliterator()
public static Spliterator.OfLong spliterator(PrimitiveIterator.OfLong iterator, long size, int characteristics)
public static Spliterator.OfLong spliterator(long[] array, int additionalCharacteristics)
public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics)
public static Spliterator.OfLong spliteratorUnknownSize(PrimitiveIterator.OfLong iterator, int characteristics)
Fully implemented class.


java.util.Spliterators.AbstractDoubleSpliterator

protected Spliterators.AbstractDoubleSpliterator(long est, int additionalCharacteristics)
public int characteristics()
public Spliterator.OfDouble trySplit()
public long estimateSize()
Fully implemented class.


java.util.Spliterators.AbstractIntSpliterator

protected Spliterators.AbstractIntSpliterator(long est, int additionalCharacteristics)
public int characteristics()
public Spliterator.OfInt trySplit()
public long estimateSize()
Fully implemented class.


java.util.Spliterators.AbstractLongSpliterator

protected Spliterators.AbstractLongSpliterator(long est, int additionalCharacteristics)
public int characteristics()
public Spliterator.OfLong trySplit()
public long estimateSize()
Fully implemented class.


java.util.Spliterators.AbstractSpliterator

protected Spliterators.AbstractSpliterator(long est, int additionalCharacteristics)
public int characteristics()
public Spliterator trySplit()
public long estimateSize()
Fully implemented class.


java.util.StringJoiner

public StringJoiner(CharSequence delimiter)
public StringJoiner(CharSequence delimiter, CharSequence prefix, CharSequence suffix)
public int length()
public String toString()
public StringJoiner add(CharSequence newElement)
public StringJoiner merge(StringJoiner other)
public StringJoiner setEmptyValue(CharSequence emptyValue)
Fully implemented class.


java.util.concurrent.ConcurrentHashMap

public ConcurrentHashMap()
public ConcurrentHashMap(int initialCapacity)
public ConcurrentHashMap(int initialCapacity, float loadFactor)
public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)
public ConcurrentHashMap(java.util.Map m)
public boolean contains(Object value)
public boolean containsKey(Object key)
public boolean containsValue(Object value)
public boolean equals(Object o)
public boolean isEmpty()
public boolean remove(Object key, Object value)
public boolean replace(Object key, Object oldValue, Object newValue)
public double reduceEntriesToDouble(long parallelismThreshold, java.util.function.ToDoubleFunction transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
public double reduceKeysToDouble(long parallelismThreshold, java.util.function.ToDoubleFunction transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
public double reduceToDouble(long parallelismThreshold, java.util.function.ToDoubleBiFunction transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
public double reduceValuesToDouble(long parallelismThreshold, java.util.function.ToDoubleFunction transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
public int hashCode()
public int reduceEntriesToInt(long parallelismThreshold, java.util.function.ToIntFunction transformer, int basis, java.util.function.IntBinaryOperator reducer)
public int reduceKeysToInt(long parallelismThreshold, java.util.function.ToIntFunction transformer, int basis, java.util.function.IntBinaryOperator reducer)
public int reduceToInt(long parallelismThreshold, java.util.function.ToIntBiFunction transformer, int basis, java.util.function.IntBinaryOperator reducer)
public int reduceValuesToInt(long parallelismThreshold, java.util.function.ToIntFunction transformer, int basis, java.util.function.IntBinaryOperator reducer)
public int size()
public Object compute(Object key, java.util.function.BiFunction remappingFunction)
public Object computeIfAbsent(Object key, java.util.function.Function mappingFunction)
public Object computeIfPresent(Object key, java.util.function.BiFunction remappingFunction)
public Object get(Object key)
public Object getOrDefault(Object key, Object defaultValue)
public Object merge(Object key, Object value, java.util.function.BiFunction remappingFunction)
public Object put(Object key, Object value)
public Object putIfAbsent(Object key, Object value)
public Object reduce(long parallelismThreshold, java.util.function.BiFunction transformer, java.util.function.BiFunction reducer)
public Object reduceEntries(long parallelismThreshold, java.util.function.Function transformer, java.util.function.BiFunction reducer)
public Object reduceKeys(long parallelismThreshold, java.util.function.BiFunction reducer)
public Object reduceKeys(long parallelismThreshold, java.util.function.Function transformer, java.util.function.BiFunction reducer)
public Object reduceValues(long parallelismThreshold, java.util.function.BiFunction reducer)
public Object reduceValues(long parallelismThreshold, java.util.function.Function transformer, java.util.function.BiFunction reducer)
public Object remove(Object key)
public Object replace(Object key, Object value)
public Object search(long parallelismThreshold, java.util.function.BiFunction searchFunction)
public Object searchEntries(long parallelismThreshold, java.util.function.Function searchFunction)
public Object searchKeys(long parallelismThreshold, java.util.function.Function searchFunction)
public Object searchValues(long parallelismThreshold, java.util.function.Function searchFunction)
public String toString()
public java.util.Collection values()
public java.util.Enumeration elements()
public java.util.Enumeration keys()
public java.util.Map.Entry reduceEntries(long parallelismThreshold, java.util.function.BiFunction reducer)
public java.util.Set entrySet()
public java.util.Set keySet()
public ConcurrentHashMap.KeySetView keySet(Object mappedValue)
public static ConcurrentHashMap.KeySetView newKeySet()
public static ConcurrentHashMap.KeySetView newKeySet(int initialCapacity)
public long mappingCount()
public long reduceEntriesToLong(long parallelismThreshold, java.util.function.ToLongFunction transformer, long basis, java.util.function.LongBinaryOperator reducer)
public long reduceKeysToLong(long parallelismThreshold, java.util.function.ToLongFunction transformer, long basis, java.util.function.LongBinaryOperator reducer)
public long reduceToLong(long parallelismThreshold, java.util.function.ToLongBiFunction transformer, long basis, java.util.function.LongBinaryOperator reducer)
public long reduceValuesToLong(long parallelismThreshold, java.util.function.ToLongFunction transformer, long basis, java.util.function.LongBinaryOperator reducer)
public void clear()
public void forEach(java.util.function.BiConsumer action)
public void forEach(long parallelismThreshold, java.util.function.BiConsumer action)
public void forEach(long parallelismThreshold, java.util.function.BiFunction transformer, java.util.function.Consumer action)
public void forEachEntry(long parallelismThreshold, java.util.function.Consumer action)
public void forEachEntry(long parallelismThreshold, java.util.function.Function transformer, java.util.function.Consumer action)
public void forEachKey(long parallelismThreshold, java.util.function.Consumer action)
public void forEachKey(long parallelismThreshold, java.util.function.Function transformer, java.util.function.Consumer action)
public void forEachValue(long parallelismThreshold, java.util.function.Consumer action)
public void forEachValue(long parallelismThreshold, java.util.function.Function transformer, java.util.function.Consumer action)
public void putAll(java.util.Map m)
public void replaceAll(java.util.function.BiFunction function)
Fully implemented class.


java.util.concurrent.ConcurrentHashMap.KeySetView

public boolean add(Object e)
public boolean addAll(java.util.Collection c)
public boolean contains(Object o)
public final boolean containsAll(java.util.Collection c)
public boolean equals(Object o)
public final boolean isEmpty()
public boolean remove(Object o)
public final boolean removeAll(java.util.Collection c)
public final boolean retainAll(java.util.Collection c)
public int hashCode()
public final int size()
public Object getMappedValue()
public final Object[] toArray()
public final Object[] toArray(Object[] a)
public final String toString()
public java.util.Iterator iterator()
public java.util.Spliterator spliterator()
public ConcurrentHashMap getMap()
public final void clear()
public void forEach(java.util.function.Consumer action)
Fully implemented class.


java.util.concurrent.ThreadLocalRandom

public boolean nextBoolean()
public double nextDouble()
public double nextDouble(double bound)
public double nextDouble(double origin, double bound)
public double nextGaussian()
public float nextFloat()
protected int next(int bits)
public int nextInt()
public int nextInt(int bound)
public int nextInt(int origin, int bound)
public static ThreadLocalRandom current()
public java.util.stream.DoubleStream doubles()
public java.util.stream.DoubleStream doubles(double randomNumberOrigin, double randomNumberBound)
public java.util.stream.DoubleStream doubles(long streamSize)
public java.util.stream.DoubleStream doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)
public java.util.stream.IntStream ints()
public java.util.stream.IntStream ints(int randomNumberOrigin, int randomNumberBound)
public java.util.stream.IntStream ints(long streamSize)
public java.util.stream.IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)
public java.util.stream.LongStream longs()
public java.util.stream.LongStream longs(long streamSize)
public java.util.stream.LongStream longs(long randomNumberOrigin, long randomNumberBound)
public java.util.stream.LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound)
public long nextLong()
public long nextLong(long bound)
public long nextLong(long origin, long bound)
public void setSeed(long seed)
Fully implemented class.


java.util.function.BiConsumer

public BiConsumer andThen(BiConsumer after)
public abstract void accept(Object p0, Object p1)
Fully implemented class.


java.util.function.BiFunction

public abstract Object apply(Object p0, Object p1)
public BiFunction andThen(Function after)
Fully implemented class.


java.util.function.BiPredicate

public abstract boolean test(Object p0, Object p1)
public BiPredicate and(BiPredicate other)
public BiPredicate negate()
public BiPredicate or(BiPredicate other)
Fully implemented class.


java.util.function.BinaryOperator

public static BinaryOperator maxBy(java.util.Comparator comparator)
public static BinaryOperator minBy(java.util.Comparator comparator)
Fully implemented class.


java.util.function.BooleanSupplier

public abstract boolean getAsBoolean()
Fully implemented class.


java.util.function.Consumer

public Consumer andThen(Consumer after)
public abstract void accept(Object p0)
Fully implemented class.


java.util.function.DoubleBinaryOperator

public abstract double applyAsDouble(double p0, double p1)
Fully implemented class.


java.util.function.DoubleConsumer

public DoubleConsumer andThen(DoubleConsumer after)
public abstract void accept(double p0)
Fully implemented class.


java.util.function.DoubleFunction

public abstract Object apply(double p0)
Fully implemented class.


java.util.function.DoublePredicate

public abstract boolean test(double p0)
public DoublePredicate and(DoublePredicate other)
public DoublePredicate negate()
public DoublePredicate or(DoublePredicate other)
Fully implemented class.


java.util.function.DoubleSupplier

public abstract double getAsDouble()
Fully implemented class.


java.util.function.DoubleToIntFunction

public abstract int applyAsInt(double p0)
Fully implemented class.


java.util.function.DoubleToLongFunction

public abstract long applyAsLong(double p0)
Fully implemented class.


java.util.function.DoubleUnaryOperator

public abstract double applyAsDouble(double p0)
public DoubleUnaryOperator andThen(DoubleUnaryOperator after)
public DoubleUnaryOperator compose(DoubleUnaryOperator before)
public static DoubleUnaryOperator identity()
Fully implemented class.


java.util.function.Function

public abstract Object apply(Object p0)
public Function andThen(Function after)
public Function compose(Function before)
public static Function identity()
Fully implemented class.


java.util.function.IntBinaryOperator

public abstract int applyAsInt(int p0, int p1)
Fully implemented class.


java.util.function.IntConsumer

public IntConsumer andThen(IntConsumer after)
public abstract void accept(int p0)
Fully implemented class.


java.util.function.IntFunction

public abstract Object apply(int p0)
Fully implemented class.


java.util.function.IntPredicate

public abstract boolean test(int p0)
public IntPredicate and(IntPredicate other)
public IntPredicate negate()
public IntPredicate or(IntPredicate other)
Fully implemented class.


java.util.function.IntSupplier

public abstract int getAsInt()
Fully implemented class.


java.util.function.IntToDoubleFunction

public abstract double applyAsDouble(int p0)
Fully implemented class.


java.util.function.IntToLongFunction

public abstract long applyAsLong(int p0)
Fully implemented class.


java.util.function.IntUnaryOperator

public abstract int applyAsInt(int p0)
public IntUnaryOperator andThen(IntUnaryOperator after)
public IntUnaryOperator compose(IntUnaryOperator before)
public static IntUnaryOperator identity()
Fully implemented class.


java.util.function.LongBinaryOperator

public abstract long applyAsLong(long p0, long p1)
Fully implemented class.


java.util.function.LongConsumer

public LongConsumer andThen(LongConsumer after)
public abstract void accept(long p0)
Fully implemented class.


java.util.function.LongFunction

public abstract Object apply(long p0)
Fully implemented class.


java.util.function.LongPredicate

public abstract boolean test(long p0)
public LongPredicate and(LongPredicate other)
public LongPredicate negate()
public LongPredicate or(LongPredicate other)
Fully implemented class.


java.util.function.LongSupplier

public abstract long getAsLong()
Fully implemented class.


java.util.function.LongToDoubleFunction

public abstract double applyAsDouble(long p0)
Fully implemented class.


java.util.function.LongToIntFunction

public abstract int applyAsInt(long p0)
Fully implemented class.


java.util.function.LongUnaryOperator

public LongUnaryOperator andThen(LongUnaryOperator after)
public LongUnaryOperator compose(LongUnaryOperator before)
public static LongUnaryOperator identity()
public abstract long applyAsLong(long p0)
Fully implemented class.


java.util.function.ObjDoubleConsumer

public abstract void accept(Object p0, double p1)
Fully implemented class.


java.util.function.ObjIntConsumer

public abstract void accept(Object p0, int p1)
Fully implemented class.


java.util.function.ObjLongConsumer

public abstract void accept(Object p0, long p1)
Fully implemented class.


java.util.function.Predicate

public abstract boolean test(Object p0)
public Predicate and(Predicate other)
public static Predicate isEqual(Object targetRef)
public Predicate negate()
public Predicate or(Predicate other)
Fully implemented class.


java.util.function.Supplier

public abstract Object get()
Fully implemented class.


java.util.function.ToDoubleBiFunction

public abstract double applyAsDouble(Object p0, Object p1)
Fully implemented class.


java.util.function.ToDoubleFunction

public abstract double applyAsDouble(Object p0)
Fully implemented class.


java.util.function.ToIntBiFunction

public abstract int applyAsInt(Object p0, Object p1)
Fully implemented class.


java.util.function.ToIntFunction

public abstract int applyAsInt(Object p0)
Fully implemented class.


java.util.function.ToLongBiFunction

public abstract long applyAsLong(Object p0, Object p1)
Fully implemented class.


java.util.function.ToLongFunction

public abstract long applyAsLong(Object p0)
Fully implemented class.


java.util.function.UnaryOperator

public static UnaryOperator identity()
Fully implemented class.


java.util.stream.BaseStream

public abstract boolean isParallel()
public abstract java.util.Iterator iterator()
public abstract java.util.Spliterator spliterator()
public abstract BaseStream onClose(Runnable p0)
public abstract BaseStream parallel()
public abstract BaseStream sequential()
public abstract BaseStream unordered()
public abstract void close()
Fully implemented class. The method parallel is only supported from API level 21.


java.util.stream.Collector

public abstract java.util.Set characteristics()
public abstract java.util.function.BiConsumer accumulator()
public abstract java.util.function.BinaryOperator combiner()
public abstract java.util.function.Function finisher()
public abstract java.util.function.Supplier supplier()
public static Collector of(java.util.function.Supplier supplier, java.util.function.BiConsumer accumulator, java.util.function.BinaryOperator combiner, java.util.function.Function finisher, Collector.Characteristics[] characteristics)
public static Collector of(java.util.function.Supplier supplier, java.util.function.BiConsumer accumulator, java.util.function.BinaryOperator combiner, Collector.Characteristics[] characteristics)
Fully implemented class.


java.util.stream.Collector.Characteristics

public static final Collector.Characteristics CONCURRENT
public static final Collector.Characteristics IDENTITY_FINISH
public static final Collector.Characteristics UNORDERED
public static Collector.Characteristics valueOf(String name)
public static Collector.Characteristics[] values()
Fully implemented class.


java.util.stream.Collectors

public static Collector averagingDouble(java.util.function.ToDoubleFunction mapper)
public static Collector averagingInt(java.util.function.ToIntFunction mapper)
public static Collector averagingLong(java.util.function.ToLongFunction mapper)
public static Collector collectingAndThen(Collector downstream, java.util.function.Function finisher)
public static Collector counting()
public static Collector groupingBy(java.util.function.Function classifier)
public static Collector groupingBy(java.util.function.Function classifier, java.util.function.Supplier mapFactory, Collector downstream)
public static Collector groupingBy(java.util.function.Function classifier, Collector downstream)
public static Collector groupingByConcurrent(java.util.function.Function classifier)
public static Collector groupingByConcurrent(java.util.function.Function classifier, java.util.function.Supplier mapFactory, Collector downstream)
public static Collector groupingByConcurrent(java.util.function.Function classifier, Collector downstream)
public static Collector joining()
public static Collector joining(CharSequence delimiter)
public static Collector joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)
public static Collector mapping(java.util.function.Function mapper, Collector downstream)
public static Collector maxBy(java.util.Comparator comparator)
public static Collector minBy(java.util.Comparator comparator)
public static Collector partitioningBy(java.util.function.Predicate predicate)
public static Collector partitioningBy(java.util.function.Predicate predicate, Collector downstream)
public static Collector reducing(Object identity, java.util.function.BinaryOperator op)
public static Collector reducing(Object identity, java.util.function.Function mapper, java.util.function.BinaryOperator op)
public static Collector reducing(java.util.function.BinaryOperator op)
public static Collector summarizingDouble(java.util.function.ToDoubleFunction mapper)
public static Collector summarizingInt(java.util.function.ToIntFunction mapper)
public static Collector summarizingLong(java.util.function.ToLongFunction mapper)
public static Collector summingDouble(java.util.function.ToDoubleFunction mapper)
public static Collector summingInt(java.util.function.ToIntFunction mapper)
public static Collector summingLong(java.util.function.ToLongFunction mapper)
public static Collector toCollection(java.util.function.Supplier collectionFactory)
public static Collector toConcurrentMap(java.util.function.Function keyMapper, java.util.function.Function valueMapper)
public static Collector toConcurrentMap(java.util.function.Function keyMapper, java.util.function.Function valueMapper, java.util.function.BinaryOperator mergeFunction)
public static Collector toConcurrentMap(java.util.function.Function keyMapper, java.util.function.Function valueMapper, java.util.function.BinaryOperator mergeFunction, java.util.function.Supplier mapSupplier)
public static Collector toList()
public static Collector toMap(java.util.function.Function keyMapper, java.util.function.Function valueMapper)
public static Collector toMap(java.util.function.Function keyMapper, java.util.function.Function valueMapper, java.util.function.BinaryOperator mergeFunction)
public static Collector toMap(java.util.function.Function keyMapper, java.util.function.Function valueMapper, java.util.function.BinaryOperator mergeFunction, java.util.function.Supplier mapSupplier)
public static Collector toSet()
Fully implemented class.


java.util.stream.DoubleStream

public abstract boolean allMatch(java.util.function.DoublePredicate p0)
public abstract boolean anyMatch(java.util.function.DoublePredicate p0)
public abstract boolean noneMatch(java.util.function.DoublePredicate p0)
public abstract double reduce(double p0, java.util.function.DoubleBinaryOperator p1)
public abstract double sum()
public abstract double[] toArray()
public abstract Object collect(java.util.function.Supplier p0, java.util.function.ObjDoubleConsumer p1, java.util.function.BiConsumer p2)
public abstract java.util.DoubleSummaryStatistics summaryStatistics()
public abstract java.util.OptionalDouble average()
public abstract java.util.OptionalDouble findAny()
public abstract java.util.OptionalDouble findFirst()
public abstract java.util.OptionalDouble max()
public abstract java.util.OptionalDouble min()
public abstract java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator p0)
public abstract java.util.PrimitiveIterator.OfDouble iterator()
public abstract java.util.Spliterator.OfDouble spliterator()
public static DoubleStream concat(DoubleStream a, DoubleStream b)
public abstract DoubleStream distinct()
public static DoubleStream empty()
public abstract DoubleStream filter(java.util.function.DoublePredicate p0)
public abstract DoubleStream flatMap(java.util.function.DoubleFunction p0)
public static DoubleStream generate(java.util.function.DoubleSupplier s)
public static DoubleStream iterate(double seed, java.util.function.DoubleUnaryOperator f)
public abstract DoubleStream limit(long p0)
public abstract DoubleStream map(java.util.function.DoubleUnaryOperator p0)
public static DoubleStream of(double t)
public static DoubleStream of(double[] values)
public abstract DoubleStream parallel()
public abstract DoubleStream peek(java.util.function.DoubleConsumer p0)
public abstract DoubleStream sequential()
public abstract DoubleStream skip(long p0)
public abstract DoubleStream sorted()
public static DoubleStream.Builder builder()
public abstract IntStream mapToInt(java.util.function.DoubleToIntFunction p0)
public abstract LongStream mapToLong(java.util.function.DoubleToLongFunction p0)
public abstract Stream boxed()
public abstract Stream mapToObj(java.util.function.DoubleFunction p0)
public abstract long count()
public abstract void forEach(java.util.function.DoubleConsumer p0)
public abstract void forEachOrdered(java.util.function.DoubleConsumer p0)
Fully implemented class. The method parallel is only supported from API level 21.


java.util.stream.DoubleStream.Builder

public abstract DoubleStream build()
public DoubleStream.Builder add(double t)
public abstract void accept(double p0)
Fully implemented class.


java.util.stream.IntStream

public abstract boolean allMatch(java.util.function.IntPredicate p0)
public abstract boolean anyMatch(java.util.function.IntPredicate p0)
public abstract boolean noneMatch(java.util.function.IntPredicate p0)
public abstract int reduce(int p0, java.util.function.IntBinaryOperator p1)
public abstract int sum()
public abstract int[] toArray()
public abstract Object collect(java.util.function.Supplier p0, java.util.function.ObjIntConsumer p1, java.util.function.BiConsumer p2)
public abstract java.util.IntSummaryStatistics summaryStatistics()
public abstract java.util.OptionalDouble average()
public abstract java.util.OptionalInt findAny()
public abstract java.util.OptionalInt findFirst()
public abstract java.util.OptionalInt max()
public abstract java.util.OptionalInt min()
public abstract java.util.OptionalInt reduce(java.util.function.IntBinaryOperator p0)
public abstract java.util.PrimitiveIterator.OfInt iterator()
public abstract java.util.Spliterator.OfInt spliterator()
public abstract DoubleStream asDoubleStream()
public abstract DoubleStream mapToDouble(java.util.function.IntToDoubleFunction p0)
public static IntStream concat(IntStream a, IntStream b)
public abstract IntStream distinct()
public static IntStream empty()
public abstract IntStream filter(java.util.function.IntPredicate p0)
public abstract IntStream flatMap(java.util.function.IntFunction p0)
public static IntStream generate(java.util.function.IntSupplier s)
public static IntStream iterate(int seed, java.util.function.IntUnaryOperator f)
public abstract IntStream limit(long p0)
public abstract IntStream map(java.util.function.IntUnaryOperator p0)
public static IntStream of(int t)
public static IntStream of(int[] values)
public abstract IntStream parallel()
public abstract IntStream peek(java.util.function.IntConsumer p0)
public static IntStream range(int startInclusive, int endExclusive)
public static IntStream rangeClosed(int startInclusive, int endInclusive)
public abstract IntStream sequential()
public abstract IntStream skip(long p0)
public abstract IntStream sorted()
public static IntStream.Builder builder()
public abstract LongStream asLongStream()
public abstract LongStream mapToLong(java.util.function.IntToLongFunction p0)
public abstract Stream boxed()
public abstract Stream mapToObj(java.util.function.IntFunction p0)
public abstract long count()
public abstract void forEach(java.util.function.IntConsumer p0)
public abstract void forEachOrdered(java.util.function.IntConsumer p0)
Fully implemented class. The method parallel is only supported from API level 21.


java.util.stream.IntStream.Builder

public abstract IntStream build()
public IntStream.Builder add(int t)
public abstract void accept(int p0)
Fully implemented class.


java.util.stream.LongStream

public abstract boolean allMatch(java.util.function.LongPredicate p0)
public abstract boolean anyMatch(java.util.function.LongPredicate p0)
public abstract boolean noneMatch(java.util.function.LongPredicate p0)
public abstract Object collect(java.util.function.Supplier p0, java.util.function.ObjLongConsumer p1, java.util.function.BiConsumer p2)
public abstract java.util.LongSummaryStatistics summaryStatistics()
public abstract java.util.OptionalDouble average()
public abstract java.util.OptionalLong findAny()
public abstract java.util.OptionalLong findFirst()
public abstract java.util.OptionalLong max()
public abstract java.util.OptionalLong min()
public abstract java.util.OptionalLong reduce(java.util.function.LongBinaryOperator p0)
public abstract java.util.PrimitiveIterator.OfLong iterator()
public abstract java.util.Spliterator.OfLong spliterator()
public abstract DoubleStream asDoubleStream()
public abstract DoubleStream mapToDouble(java.util.function.LongToDoubleFunction p0)
public abstract IntStream mapToInt(java.util.function.LongToIntFunction p0)
public static LongStream concat(LongStream a, LongStream b)
public abstract LongStream distinct()
public static LongStream empty()
public abstract LongStream filter(java.util.function.LongPredicate p0)
public abstract LongStream flatMap(java.util.function.LongFunction p0)
public static LongStream generate(java.util.function.LongSupplier s)
public static LongStream iterate(long seed, java.util.function.LongUnaryOperator f)
public abstract LongStream limit(long p0)
public abstract LongStream map(java.util.function.LongUnaryOperator p0)
public static LongStream of(long t)
public static LongStream of(long[] values)
public abstract LongStream parallel()
public abstract LongStream peek(java.util.function.LongConsumer p0)
public static LongStream range(long startInclusive, long endExclusive)
public static LongStream rangeClosed(long startInclusive, long endInclusive)
public abstract LongStream sequential()
public abstract LongStream skip(long p0)
public abstract LongStream sorted()
public static LongStream.Builder builder()
public abstract Stream boxed()
public abstract Stream mapToObj(java.util.function.LongFunction p0)
public abstract long count()
public abstract long reduce(long p0, java.util.function.LongBinaryOperator p1)
public abstract long sum()
public abstract long[] toArray()
public abstract void forEach(java.util.function.LongConsumer p0)
public abstract void forEachOrdered(java.util.function.LongConsumer p0)
Fully implemented class. The method parallel is only supported from API level 21.


java.util.stream.LongStream.Builder

public abstract LongStream build()
public LongStream.Builder add(long t)
public abstract void accept(long p0)
Fully implemented class.


java.util.stream.Stream

public abstract boolean allMatch(java.util.function.Predicate p0)
public abstract boolean anyMatch(java.util.function.Predicate p0)
public abstract boolean noneMatch(java.util.function.Predicate p0)
public abstract Object collect(java.util.function.Supplier p0, java.util.function.BiConsumer p1, java.util.function.BiConsumer p2)
public abstract Object collect(Collector p0)
public abstract Object reduce(Object p0, java.util.function.BiFunction p1, java.util.function.BinaryOperator p2)
public abstract Object reduce(Object p0, java.util.function.BinaryOperator p1)
public abstract Object[] toArray()
public abstract Object[] toArray(java.util.function.IntFunction p0)
public abstract java.util.Optional findAny()
public abstract java.util.Optional findFirst()
public abstract java.util.Optional max(java.util.Comparator p0)
public abstract java.util.Optional min(java.util.Comparator p0)
public abstract java.util.Optional reduce(java.util.function.BinaryOperator p0)
public abstract DoubleStream flatMapToDouble(java.util.function.Function p0)
public abstract DoubleStream mapToDouble(java.util.function.ToDoubleFunction p0)
public abstract IntStream flatMapToInt(java.util.function.Function p0)
public abstract IntStream mapToInt(java.util.function.ToIntFunction p0)
public abstract LongStream flatMapToLong(java.util.function.Function p0)
public abstract LongStream mapToLong(java.util.function.ToLongFunction p0)
public static Stream concat(Stream a, Stream b)
public abstract Stream distinct()
public static Stream empty()
public abstract Stream filter(java.util.function.Predicate p0)
public abstract Stream flatMap(java.util.function.Function p0)
public static Stream generate(java.util.function.Supplier s)
public static Stream iterate(Object seed, java.util.function.UnaryOperator f)
public abstract Stream limit(long p0)
public abstract Stream map(java.util.function.Function p0)
public static Stream of(Object t)
public static Stream of(Object[] values)
public abstract Stream peek(java.util.function.Consumer p0)
public abstract Stream skip(long p0)
public abstract Stream sorted()
public abstract Stream sorted(java.util.Comparator p0)
public static Stream.Builder builder()
public abstract long count()
public abstract void forEach(java.util.function.Consumer p0)
public abstract void forEachOrdered(java.util.function.Consumer p0)
Fully implemented class.


java.util.stream.Stream.Builder

public abstract Stream build()
public Stream.Builder add(Object t)
public abstract void accept(Object p0)
Fully implemented class.


java.util.stream.StreamSupport

public static DoubleStream doubleStream(java.util.Spliterator.OfDouble spliterator, boolean parallel)
public static DoubleStream doubleStream(java.util.function.Supplier supplier, int characteristics, boolean parallel)
public static IntStream intStream(java.util.Spliterator.OfInt spliterator, boolean parallel)
public static IntStream intStream(java.util.function.Supplier supplier, int characteristics, boolean parallel)
public static LongStream longStream(java.util.Spliterator.OfLong spliterator, boolean parallel)
public static LongStream longStream(java.util.function.Supplier supplier, int characteristics, boolean parallel)
public static Stream stream(java.util.Spliterator spliterator, boolean parallel)
public static Stream stream(java.util.function.Supplier supplier, int characteristics, boolean parallel)
Fully implemented class.


java.lang.Iterable

public java.util.Spliterator spliterator()
public void forEach(java.util.function.Consumer action)
Additional methods on existing class.


java.util.Arrays

public static Spliterator spliterator(Object[] array)
public static Spliterator spliterator(Object[] array, int startInclusive, int endExclusive)
public static Spliterator.OfDouble spliterator(double[] array)
public static Spliterator.OfDouble spliterator(double[] array, int startInclusive, int endExclusive)
public static Spliterator.OfInt spliterator(int[] array)
public static Spliterator.OfInt spliterator(int[] array, int startInclusive, int endExclusive)
public static Spliterator.OfLong spliterator(long[] array)
public static Spliterator.OfLong spliterator(long[] array, int startInclusive, int endExclusive)
public static java.util.stream.DoubleStream stream(double[] array)
public static java.util.stream.DoubleStream stream(double[] array, int startInclusive, int endExclusive)
public static java.util.stream.IntStream stream(int[] array)
public static java.util.stream.IntStream stream(int[] array, int startInclusive, int endExclusive)
public static java.util.stream.LongStream stream(long[] array)
public static java.util.stream.LongStream stream(long[] array, int startInclusive, int endExclusive)
public static java.util.stream.Stream stream(Object[] array)
public static java.util.stream.Stream stream(Object[] array, int startInclusive, int endExclusive)
Additional methods on existing class.


java.util.Calendar

public final java.time.Instant toInstant()
Additional methods on existing class.


java.util.Collection

public boolean removeIf(java.util.function.Predicate filter)
public Spliterator spliterator()
public java.util.stream.Stream parallelStream()
public java.util.stream.Stream stream()
Additional methods on existing class. The method parallelStream is only supported from API level 21.


java.util.Collections

public static Map synchronizedMap(Map m)
public static SortedMap synchronizedSortedMap(SortedMap m)
Additional methods on existing class.


java.util.Comparator

public static Comparator comparing(java.util.function.Function keyExtractor)
public static Comparator comparing(java.util.function.Function keyExtractor, Comparator keyComparator)
public static Comparator comparingDouble(java.util.function.ToDoubleFunction keyExtractor)
public static Comparator comparingInt(java.util.function.ToIntFunction keyExtractor)
public static Comparator comparingLong(java.util.function.ToLongFunction keyExtractor)
public static Comparator naturalOrder()
public static Comparator nullsFirst(Comparator comparator)
public static Comparator nullsLast(Comparator comparator)
public static Comparator reverseOrder()
public Comparator reversed()
public Comparator thenComparing(Comparator other)
public Comparator thenComparing(java.util.function.Function keyExtractor)
public Comparator thenComparing(java.util.function.Function keyExtractor, Comparator keyComparator)
public Comparator thenComparingDouble(java.util.function.ToDoubleFunction keyExtractor)
public Comparator thenComparingInt(java.util.function.ToIntFunction keyExtractor)
public Comparator thenComparingLong(java.util.function.ToLongFunction keyExtractor)
Additional methods on existing class.


java.util.Date

public java.time.Instant toInstant()
public static Date from(java.time.Instant instant)
Additional methods on existing class.


java.util.GregorianCalendar

public java.time.ZonedDateTime toZonedDateTime()
public static GregorianCalendar from(java.time.ZonedDateTime zdt)
Additional methods on existing class.


java.util.Iterator

public void forEachRemaining(java.util.function.Consumer action)
public void remove()
Additional methods on existing class.


java.util.LinkedHashSet

public Spliterator spliterator()
Additional methods on existing class.


java.util.List

public Spliterator spliterator()
public void replaceAll(java.util.function.UnaryOperator operator)
public void sort(Comparator c)
Additional methods on existing class.


java.util.Map

public boolean remove(Object key, Object value)
public boolean replace(Object key, Object oldValue, Object newValue)
public Object compute(Object key, java.util.function.BiFunction remappingFunction)
public Object computeIfAbsent(Object key, java.util.function.Function mappingFunction)
public Object computeIfPresent(Object key, java.util.function.BiFunction remappingFunction)
public Object getOrDefault(Object key, Object defaultValue)
public Object merge(Object key, Object value, java.util.function.BiFunction remappingFunction)
public Object putIfAbsent(Object key, Object value)
public Object replace(Object key, Object value)
public void forEach(java.util.function.BiConsumer action)
public void replaceAll(java.util.function.BiFunction function)
Additional methods on existing class.


java.util.Map.Entry

public static Comparator comparingByKey()
public static Comparator comparingByKey(Comparator cmp)
public static Comparator comparingByValue()
public static Comparator comparingByValue(Comparator cmp)
Additional methods on existing class.


java.util.Set

public Spliterator spliterator()
Additional methods on existing class.


java.util.SortedSet

public Spliterator spliterator()
Additional methods on existing class.


java.util.concurrent.ConcurrentMap

public Object compute(Object key, java.util.function.BiFunction remappingFunction)
public Object computeIfAbsent(Object key, java.util.function.Function mappingFunction)
public Object computeIfPresent(Object key, java.util.function.BiFunction remappingFunction)
public Object getOrDefault(Object key, Object defaultValue)
public Object merge(Object key, Object value, java.util.function.BiFunction remappingFunction)
public void forEach(java.util.function.BiConsumer action)
public void replaceAll(java.util.function.BiFunction function)
Additional methods on existing class.


java.util.concurrent.atomic.AtomicInteger

public final int accumulateAndGet(int x, java.util.function.IntBinaryOperator accumulatorFunction)
public final int getAndAccumulate(int x, java.util.function.IntBinaryOperator accumulatorFunction)
public final int getAndUpdate(java.util.function.IntUnaryOperator updateFunction)
public final int updateAndGet(java.util.function.IntUnaryOperator updateFunction)
Additional methods on existing class.


java.util.concurrent.atomic.AtomicLong

public final long accumulateAndGet(long x, java.util.function.LongBinaryOperator accumulatorFunction)
public final long getAndAccumulate(long x, java.util.function.LongBinaryOperator accumulatorFunction)
public final long getAndUpdate(java.util.function.LongUnaryOperator updateFunction)
public final long updateAndGet(java.util.function.LongUnaryOperator updateFunction)
Additional methods on existing class.


java.util.concurrent.atomic.AtomicReference

public final Object accumulateAndGet(Object x, java.util.function.BinaryOperator accumulatorFunction)
public final Object getAndAccumulate(Object x, java.util.function.BinaryOperator accumulatorFunction)
public final Object getAndUpdate(java.util.function.UnaryOperator updateFunction)
public final Object updateAndGet(java.util.function.UnaryOperator updateFunction)
Additional methods on existing class.
